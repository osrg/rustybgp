// Copyright (C) 2021,2022 The RustyBGP Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by pyang. DO NOT EDIT.

use serde::Deserialize;
use std::convert::TryFrom;

// typedef for typedef openconfig-types:std-regexp.
type StdRegexp = String;
// typedef for typedef openconfig-types:percentage.
type Percentage = u8;
// typedef for typedef bgp-types:rr-cluster-id-type.
type RrClusterIdType = String;
// typedef for identity bgp-types:remove-private-as-option.
// set of options for configuring how private AS path numbers
// are removed from advertisements.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum RemovePrivateAsOption {
    All,
    Replace,
}

impl TryFrom<String> for RemovePrivateAsOption {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "all" => Ok(Self::All),
            "replace" => Ok(Self::Replace),
            _ => Err(format!("invalid parameter (RemovePrivateAsOption) {}", s)),
        }
    }
}
// typedef for typedef bgp-types:bgp-community-regexp-type.
type BgpCommunityRegexpType = StdRegexp;
// typedef for identity bgp-types:community-type.
// type describing variations of community attributes:
// STANDARD: standard BGP community [rfc1997]
// EXTENDED: extended BGP community [rfc4360]
// BOTH: both standard and extended community.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum CommunityType {
    Standard,
    Extended,
    Both,
    None,
}

impl TryFrom<String> for CommunityType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "standard" => Ok(Self::Standard),
            "extended" => Ok(Self::Extended),
            "both" => Ok(Self::Both),
            "none" => Ok(Self::None),
            _ => Err(format!("invalid parameter (CommunityType) {}", s)),
        }
    }
}
// typedef for typedef bgp-types:bgp-ext-community-type.
type BgpExtCommunityType = String;
// typedef for typedef bgp-types:bgp-std-community-type.
type BgpStdCommunityType = String;
// typedef for identity bgp-types:peer-type.
// labels a peer or peer group as explicitly internal or
// external.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum PeerType {
    Internal,
    External,
}

impl TryFrom<String> for PeerType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "internal" => Ok(Self::Internal),
            "external" => Ok(Self::External),
            _ => Err(format!("invalid parameter (PeerType) {}", s)),
        }
    }
}
// typedef for identity bgp-types:bgp-session-direction.
// Type to describe the direction of NLRI transmission.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum BgpSessionDirection {
    Inbound,
    Outbound,
}

impl TryFrom<String> for BgpSessionDirection {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "inbound" => Ok(Self::Inbound),
            "outbound" => Ok(Self::Outbound),
            _ => Err(format!("invalid parameter (BgpSessionDirection) {}", s)),
        }
    }
}
// typedef for identity bgp-types:bgp-origin-attr-type.
// Type definition for standard BGP origin attribute.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum BgpOriginAttrType {
    Igp,
    Egp,
    Incomplete,
}

impl TryFrom<String> for BgpOriginAttrType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "igp" => Ok(Self::Igp),
            "egp" => Ok(Self::Egp),
            "incomplete" => Ok(Self::Incomplete),
            _ => Err(format!("invalid parameter (BgpOriginAttrType) {}", s)),
        }
    }
}
// typedef for identity bgp-types:afi-safi-type.
// Base identity type for AFI,SAFI tuples for BGP-4.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum AfiSafiType {
    Ipv4Unicast,
    Ipv6Unicast,
    Ipv4LabelledUnicast,
    Ipv6LabelledUnicast,
    L3VpnIpv4Unicast,
    L3VpnIpv6Unicast,
    L3VpnIpv4Multicast,
    L3VpnIpv6Multicast,
    L2VpnVpls,
    L2VpnEvpn,
    Ipv4Multicast,
    Ipv6Multicast,
    Rtc,
    Ipv4Encap,
    Ipv6Encap,
    Ipv4Flowspec,
    L3VpnIpv4Flowspec,
    Ipv6Flowspec,
    L3VpnIpv6Flowspec,
    L2VpnFlowspec,
    Ipv4Srpolicy,
    Ipv6Srpolicy,
    Opaque,
    Ls,
}

impl TryFrom<String> for AfiSafiType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "ipv4-unicast" => Ok(Self::Ipv4Unicast),
            "ipv6-unicast" => Ok(Self::Ipv6Unicast),
            "ipv4-labelled-unicast" => Ok(Self::Ipv4LabelledUnicast),
            "ipv6-labelled-unicast" => Ok(Self::Ipv6LabelledUnicast),
            "l3vpn-ipv4-unicast" => Ok(Self::L3VpnIpv4Unicast),
            "l3vpn-ipv6-unicast" => Ok(Self::L3VpnIpv6Unicast),
            "l3vpn-ipv4-multicast" => Ok(Self::L3VpnIpv4Multicast),
            "l3vpn-ipv6-multicast" => Ok(Self::L3VpnIpv6Multicast),
            "l2vpn-vpls" => Ok(Self::L2VpnVpls),
            "l2vpn-evpn" => Ok(Self::L2VpnEvpn),
            "ipv4-multicast" => Ok(Self::Ipv4Multicast),
            "ipv6-multicast" => Ok(Self::Ipv6Multicast),
            "rtc" => Ok(Self::Rtc),
            "ipv4-encap" => Ok(Self::Ipv4Encap),
            "ipv6-encap" => Ok(Self::Ipv6Encap),
            "ipv4-flowspec" => Ok(Self::Ipv4Flowspec),
            "l3vpn-ipv4-flowspec" => Ok(Self::L3VpnIpv4Flowspec),
            "ipv6-flowspec" => Ok(Self::Ipv6Flowspec),
            "l3vpn-ipv6-flowspec" => Ok(Self::L3VpnIpv6Flowspec),
            "l2vpn-flowspec" => Ok(Self::L2VpnFlowspec),
            "ipv4-srpolicy" => Ok(Self::Ipv4Srpolicy),
            "ipv6-srpolicy" => Ok(Self::Ipv6Srpolicy),
            "opaque" => Ok(Self::Opaque),
            "ls" => Ok(Self::Ls),
            _ => Err(format!("invalid parameter (AfiSafiType) {}", s)),
        }
    }
}
// typedef for identity bgp-types:bgp-capability.
// Base identity for a BGP capability.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum BgpCapability {
    Mpbgp,
    RouteRefresh,
    Asn32,
    GracefulRestart,
    AddPaths,
}

impl TryFrom<String> for BgpCapability {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "mpbgp" => Ok(Self::Mpbgp),
            "route-refresh" => Ok(Self::RouteRefresh),
            "asn32" => Ok(Self::Asn32),
            "graceful-restart" => Ok(Self::GracefulRestart),
            "add-paths" => Ok(Self::AddPaths),
            _ => Err(format!("invalid parameter (BgpCapability) {}", s)),
        }
    }
}
// typedef for identity bgp-types:bgp-well-known-std-community.
// Reserved communities within the standard community space
// defined by RFC1997. These communities must fall within the
// range 0x00000000 to 0xFFFFFFFF.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum BgpWellKnownStdCommunity {
    NoExport,
    NoAdvertise,
    NoExportSubconfed,
    Nopeer,
}

impl TryFrom<String> for BgpWellKnownStdCommunity {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "no_export" => Ok(Self::NoExport),
            "no_advertise" => Ok(Self::NoAdvertise),
            "no_export_subconfed" => Ok(Self::NoExportSubconfed),
            "nopeer" => Ok(Self::Nopeer),
            _ => Err(format!(
                "invalid parameter (BgpWellKnownStdCommunity) {}",
                s
            )),
        }
    }
}
// typedef for identity ptypes:match-set-options-restricted-type.
// Options that govern the behavior of a match statement.  The
// default behavior is ANY, i.e., the given value matches any
// of the members of the defined set.  Note this type is a
// restricted version of the match-set-options-type.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum MatchSetOptionsRestrictedType {
    Any,
    Invert,
}

impl TryFrom<String> for MatchSetOptionsRestrictedType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "any" => Ok(Self::Any),
            "invert" => Ok(Self::Invert),
            _ => Err(format!(
                "invalid parameter (MatchSetOptionsRestrictedType) {}",
                s
            )),
        }
    }
}
// typedef for identity ptypes:match-set-options-type.
// Options that govern the behavior of a match statement.  The
// default behavior is ANY, i.e., the given value matches any
// of the members of the defined set.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum MatchSetOptionsType {
    Any,
    All,
    Invert,
}

impl TryFrom<String> for MatchSetOptionsType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "any" => Ok(Self::Any),
            "all" => Ok(Self::All),
            "invert" => Ok(Self::Invert),
            _ => Err(format!("invalid parameter (MatchSetOptionsType) {}", s)),
        }
    }
}
// typedef for typedef ptypes:tag-type.
type TagType = String;
// typedef for identity ptypes:install-protocol-type.
// Base type for protocols which can install prefixes into the
// RIB.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum InstallProtocolType {
    Bgp,
    Isis,
    Ospf,
    Ospf3,
    Static,
    DirectlyConnected,
    LocalAggregate,
}

impl TryFrom<String> for InstallProtocolType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "bgp" => Ok(Self::Bgp),
            "isis" => Ok(Self::Isis),
            "ospf" => Ok(Self::Ospf),
            "ospf3" => Ok(Self::Ospf3),
            "static" => Ok(Self::Static),
            "directly-connected" => Ok(Self::DirectlyConnected),
            "local-aggregate" => Ok(Self::LocalAggregate),
            _ => Err(format!("invalid parameter (InstallProtocolType) {}", s)),
        }
    }
}
// typedef for identity ptypes:attribute-comparison.
// base type for supported comparison operators on route
// attributes.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum AttributeComparison {
    AttributeEq,
    AttributeGe,
    AttributeLe,
    Eq,
    Ge,
    Le,
}

impl TryFrom<String> for AttributeComparison {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "attribute-eq" => Ok(Self::AttributeEq),
            "attribute-ge" => Ok(Self::AttributeGe),
            "attribute-le" => Ok(Self::AttributeLe),
            "eq" => Ok(Self::Eq),
            "ge" => Ok(Self::Ge),
            "le" => Ok(Self::Le),
            _ => Err(format!("invalid parameter (AttributeComparison) {}", s)),
        }
    }
}
// typedef for identity rpol:route-disposition.
// Select the final disposition for the route, either
// accept or reject.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum RouteDisposition {
    None,
    AcceptRoute,
    RejectRoute,
}

impl TryFrom<String> for RouteDisposition {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "none" => Ok(Self::None),
            "accept-route" => Ok(Self::AcceptRoute),
            "reject-route" => Ok(Self::RejectRoute),
            _ => Err(format!("invalid parameter (RouteDisposition) {}", s)),
        }
    }
}
// typedef for identity rpol:route-type.
// Condition to check the route type in the route update.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum RouteType {
    None,
    Internal,
    External,
    Local,
}

impl TryFrom<String> for RouteType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "none" => Ok(Self::None),
            "internal" => Ok(Self::Internal),
            "external" => Ok(Self::External),
            "local" => Ok(Self::Local),
            _ => Err(format!("invalid parameter (RouteType) {}", s)),
        }
    }
}
// typedef for identity rpol:default-policy-type.
// type used to specify default route disposition in
// a policy chain.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum DefaultPolicyType {
    AcceptRoute,
    RejectRoute,
}

impl TryFrom<String> for DefaultPolicyType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "accept-route" => Ok(Self::AcceptRoute),
            "reject-route" => Ok(Self::RejectRoute),
            _ => Err(format!("invalid parameter (DefaultPolicyType) {}", s)),
        }
    }
}
// typedef for identity bgp:session-state.
// Operational state of the BGP peer.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum SessionState {
    Idle,
    Connect,
    Active,
    Opensent,
    Openconfirm,
    Established,
}

impl TryFrom<String> for SessionState {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "idle" => Ok(Self::Idle),
            "connect" => Ok(Self::Connect),
            "active" => Ok(Self::Active),
            "opensent" => Ok(Self::Opensent),
            "openconfirm" => Ok(Self::Openconfirm),
            "established" => Ok(Self::Established),
            _ => Err(format!("invalid parameter (SessionState) {}", s)),
        }
    }
}
// typedef for identity bgp:admin-state.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum AdminState {
    Up,
    Down,
    PfxCt,
}

impl TryFrom<String> for AdminState {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "up" => Ok(Self::Up),
            "down" => Ok(Self::Down),
            "pfx_ct" => Ok(Self::PfxCt),
            _ => Err(format!("invalid parameter (AdminState) {}", s)),
        }
    }
}
// typedef for identity bgp:mode.
// This leaf indicates the mode of operation of BGP graceful
// restart with the peer.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum Mode {
    HelperOnly,
    Bilateral,
    RemoteHelper,
}

impl TryFrom<String> for Mode {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "helper-only" => Ok(Self::HelperOnly),
            "bilateral" => Ok(Self::Bilateral),
            "remote-helper" => Ok(Self::RemoteHelper),
            _ => Err(format!("invalid parameter (Mode) {}", s)),
        }
    }
}
// typedef for typedef bgp-pol:bgp-next-hop-type.
type BgpNextHopType = String;
// typedef for typedef bgp-pol:bgp-as-path-prepend-repeat.
type BgpAsPathPrependRepeat = u8;
// typedef for typedef bgp-pol:bgp-set-med-type.
type BgpSetMedType = String;
// typedef for identity bgp-pol:bgp-set-community-option-type.
// Type definition for options when setting the community
// attribute in a policy action.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum BgpSetCommunityOptionType {
    Add,
    Remove,
    Replace,
}

impl TryFrom<String> for BgpSetCommunityOptionType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "add" => Ok(Self::Add),
            "remove" => Ok(Self::Remove),
            "replace" => Ok(Self::Replace),
            _ => Err(format!(
                "invalid parameter (BgpSetCommunityOptionType) {}",
                s
            )),
        }
    }
}
// typedef for identity gobgp:bmp-route-monitoring-policy-type.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum BmpRouteMonitoringPolicyType {
    PrePolicy,
    PostPolicy,
    Both,
    LocalRib,
    All,
}

impl TryFrom<String> for BmpRouteMonitoringPolicyType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "pre-policy" => Ok(Self::PrePolicy),
            "post-policy" => Ok(Self::PostPolicy),
            "both" => Ok(Self::Both),
            "local-rib" => Ok(Self::LocalRib),
            "all" => Ok(Self::All),
            _ => Err(format!(
                "invalid parameter (BmpRouteMonitoringPolicyType) {}",
                s
            )),
        }
    }
}
// typedef for identity gobgp:mrt-type.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum MrtType {
    Updates,
    Table,
}

impl TryFrom<String> for MrtType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "updates" => Ok(Self::Updates),
            "table" => Ok(Self::Table),
            _ => Err(format!("invalid parameter (MrtType) {}", s)),
        }
    }
}
// typedef for identity gobgp:rpki-validation-result-type.
// indicate the validation result of RPKI based on ROA.
#[derive(Deserialize, Debug, PartialEq)]
#[serde(try_from = "String")]
pub(crate) enum RpkiValidationResultType {
    None,
    NotFound,
    Valid,
    Invalid,
}

impl TryFrom<String> for RpkiValidationResultType {
    type Error = String;
    fn try_from(s: String) -> Result<Self, Self::Error> {
        match s.as_str() {
            "none" => Ok(Self::None),
            "not-found" => Ok(Self::NotFound),
            "valid" => Ok(Self::Valid),
            "invalid" => Ok(Self::Invalid),
            _ => Err(format!(
                "invalid parameter (RpkiValidationResultType) {}",
                s
            )),
        }
    }
}
// struct for container gobgp:state.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct DynamicNeighborState {
    // original -> gobgp:prefix
    pub(crate) prefix: Option<String>,
    // original -> gobgp:peer-group
    #[serde(rename = "peer-group")]
    pub(crate) peer_group: Option<String>,
}
// struct for container gobgp:config.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct DynamicNeighborConfig {
    // original -> gobgp:prefix
    pub(crate) prefix: Option<String>,
    // original -> gobgp:peer-group
    #[serde(rename = "peer-group")]
    pub(crate) peer_group: Option<String>,
}
// struct for container gobgp:dynamic-neighbor.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct DynamicNeighbor {
    // original -> gobgp:prefix
    // original -> gobgp:dynamic-neighbor-config
    pub(crate) config: Option<DynamicNeighborConfig>,
    // original -> gobgp:dynamic-neighbor-state
    pub(crate) state: Option<DynamicNeighborState>,
}
// struct for container gobgp:state.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct CollectorState {
    // original -> gobgp:url
    pub(crate) url: Option<String>,
    // original -> gobgp:db-name
    #[serde(rename = "db-name")]
    pub(crate) db_name: Option<String>,
    // original -> gobgp:table-dump-interval
    #[serde(rename = "table-dump-interval")]
    pub(crate) table_dump_interval: Option<u64>,
}
// struct for container gobgp:config.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct CollectorConfig {
    // original -> gobgp:url
    pub(crate) url: Option<String>,
    // original -> gobgp:db-name
    #[serde(rename = "db-name")]
    pub(crate) db_name: Option<String>,
    // original -> gobgp:table-dump-interval
    #[serde(rename = "table-dump-interval")]
    pub(crate) table_dump_interval: Option<u64>,
}
// struct for container gobgp:collector.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Collector {
    // original -> gobgp:collector-config
    pub(crate) config: Option<CollectorConfig>,
    // original -> gobgp:collector-state
    pub(crate) state: Option<CollectorState>,
}
// struct for container gobgp:state.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ZebraState {
    // original -> gobgp:enabled
    // gobgp:enabled's original type is boolean.
    // Configure enabling to connect to zebra.
    pub(crate) enabled: Option<bool>,
    // original -> gobgp:url
    // Configure url for zebra.
    pub(crate) url: Option<String>,
    // original -> gobgp:redistribute-route-type
    #[serde(rename = "redistribute-route-type-list")]
    pub(crate) redistribute_route_type_list: Option<Vec<String>>,
    // original -> gobgp:version
    // Configure version of zebra protocol.  Default is 2.
    // Supported version are 2 or 3 for Quagga and 4, 5 or 6 for FRRouting.
    pub(crate) version: Option<u8>,
    // original -> gobgp:nexthop-trigger-enable
    // gobgp:nexthop-trigger-enable's original type is boolean.
    #[serde(rename = "nexthop-trigger-enable")]
    pub(crate) nexthop_trigger_enable: Option<bool>,
    // original -> gobgp:nexthop-trigger-delay
    #[serde(rename = "nexthop-trigger-delay")]
    pub(crate) nexthop_trigger_delay: Option<u8>,
    // original -> gobgp:mpls-label-range-size
    // Configure MPLS label range size which will be requested to
    // FRR/Zebra.
    #[serde(rename = "mpls-label-range-size")]
    pub(crate) mpls_label_range_size: Option<u32>,
    // original -> gobgp:software-name
    // Configure zebra software name.
    // frr4, cumulus, frr6, frr7, frr7.2 and frr7.3 can be used.
    #[serde(rename = "software-name")]
    pub(crate) software_name: Option<String>,
}
// struct for container gobgp:config.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ZebraConfig {
    // original -> gobgp:enabled
    // gobgp:enabled's original type is boolean.
    // Configure enabling to connect to zebra.
    pub(crate) enabled: Option<bool>,
    // original -> gobgp:url
    // Configure url for zebra.
    pub(crate) url: Option<String>,
    // original -> gobgp:redistribute-route-type
    #[serde(rename = "redistribute-route-type-list")]
    pub(crate) redistribute_route_type_list: Option<Vec<String>>,
    // original -> gobgp:version
    // Configure version of zebra protocol.  Default is 2.
    // Supported version are 2 or 3 for Quagga and 4, 5 or 6 for FRRouting.
    pub(crate) version: Option<u8>,
    // original -> gobgp:nexthop-trigger-enable
    // gobgp:nexthop-trigger-enable's original type is boolean.
    #[serde(rename = "nexthop-trigger-enable")]
    pub(crate) nexthop_trigger_enable: Option<bool>,
    // original -> gobgp:nexthop-trigger-delay
    #[serde(rename = "nexthop-trigger-delay")]
    pub(crate) nexthop_trigger_delay: Option<u8>,
    // original -> gobgp:mpls-label-range-size
    // Configure MPLS label range size which will be requested to
    // FRR/Zebra.
    #[serde(rename = "mpls-label-range-size")]
    pub(crate) mpls_label_range_size: Option<u32>,
    // original -> gobgp:software-name
    // Configure zebra software name.
    // frr4, cumulus, frr6, frr7, frr7.2 and frr7.3 can be used.
    #[serde(rename = "software-name")]
    pub(crate) software_name: Option<String>,
}
// struct for container gobgp:zebra.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Zebra {
    // original -> gobgp:zebra-config
    pub(crate) config: Option<ZebraConfig>,
    // original -> gobgp:zebra-state
    pub(crate) state: Option<ZebraState>,
}
// struct for container gobgp:config.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MrtConfig {
    // original -> gobgp:dump-type
    #[serde(rename = "dump-type")]
    pub(crate) dump_type: Option<MrtType>,
    // original -> gobgp:file-name
    // Configures a file name to be written.
    #[serde(rename = "file-name")]
    pub(crate) file_name: Option<String>,
    // original -> gobgp:table-name
    // specify the table name with route server setup.
    #[serde(rename = "table-name")]
    pub(crate) table_name: Option<String>,
    // original -> gobgp:dump-interval
    #[serde(rename = "dump-interval")]
    pub(crate) dump_interval: Option<u64>,
    // original -> gobgp:rotation-interval
    #[serde(rename = "rotation-interval")]
    pub(crate) rotation_interval: Option<u64>,
}
// struct for container gobgp:mrt.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Mrt {
    // original -> gobgp:file-name
    // original -> gobgp:mrt-config
    pub(crate) config: Option<MrtConfig>,
}
// struct for container gobgp:state.
// Configured states of VRF.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct VrfState {
    // original -> gobgp:name
    // Unique name among all VRF instances.
    pub(crate) name: Option<String>,
    // original -> gobgp:id
    // Unique identifier among all VRF instances.
    pub(crate) id: Option<u32>,
    // original -> gobgp:rd
    // Route Distinguisher for this VRF.
    pub(crate) rd: Option<String>,
    // original -> gobgp:import-rt
    // List of import Route Targets for this VRF.
    #[serde(rename = "import-rt-list")]
    pub(crate) import_rt_list: Option<Vec<String>>,
    // original -> gobgp:export-rt
    // List of export Route Targets for this VRF.
    #[serde(rename = "export-rt-list")]
    pub(crate) export_rt_list: Option<Vec<String>>,
}
// struct for container gobgp:config.
// Configuration parameters for VRF.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct VrfConfig {
    // original -> gobgp:name
    // Unique name among all VRF instances.
    pub(crate) name: Option<String>,
    // original -> gobgp:id
    // Unique identifier among all VRF instances.
    pub(crate) id: Option<u32>,
    // original -> gobgp:rd
    // Route Distinguisher for this VRF.
    pub(crate) rd: Option<String>,
    // original -> gobgp:import-rt
    // List of import Route Targets for this VRF.
    #[serde(rename = "import-rt-list")]
    pub(crate) import_rt_list: Option<Vec<String>>,
    // original -> gobgp:export-rt
    // List of export Route Targets for this VRF.
    #[serde(rename = "export-rt-list")]
    pub(crate) export_rt_list: Option<Vec<String>>,
    // original -> gobgp:both-rt
    // List of both import and export Route Targets for this VRF. Each
    // configuration for import and export Route Targets will be preferred.
    #[serde(rename = "both-rt-list")]
    pub(crate) both_rt_list: Option<Vec<String>>,
}
// struct for container gobgp:vrf.
// VRF instance configurations on the local system.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Vrf {
    // original -> gobgp:name
    // original -> gobgp:vrf-config
    // Configuration parameters for VRF.
    pub(crate) config: Option<VrfConfig>,
    // original -> gobgp:vrf-state
    // Configured states of VRF.
    pub(crate) state: Option<VrfState>,
}
// struct for container gobgp:state.
// Configuration parameters relating to BMP server.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct BmpServerState {
    // original -> gobgp:address
    // gobgp:address's original type is inet:ip-address.
    // Reference to the address of the BMP server used as
    // a key in the BMP server list.
    pub(crate) address: Option<String>,
    // original -> gobgp:port
    // Reference to the port of the BMP server.
    pub(crate) port: Option<u32>,
    // original -> gobgp:route-monitoring-policy
    #[serde(rename = "route-monitoring-policy")]
    pub(crate) route_monitoring_policy: Option<BmpRouteMonitoringPolicyType>,
    // original -> gobgp:statistics-timeout
    // Interval seconds of statistics messages sent to BMP server.
    #[serde(rename = "statistics-timeout")]
    pub(crate) statistics_timeout: Option<u16>,
    // original -> gobgp:route-mirroring-enabled
    // gobgp:route-mirroring-enabled's original type is boolean.
    // Enable feature for mirroring of received BGP messages
    // mainly for debugging purpose.
    #[serde(rename = "route-mirroring-enabled")]
    pub(crate) route_mirroring_enabled: Option<bool>,
    // original -> gobgp:sys-name
    // Reference to the SysName of the BMP server.
    #[serde(rename = "sys-name")]
    pub(crate) sys_name: Option<String>,
    // original -> gobgp:sys-descr
    // Reference to the SysDescr of the BMP server.
    #[serde(rename = "sys-descr")]
    pub(crate) sys_descr: Option<String>,
}
// struct for container gobgp:config.
// Configuration parameters relating to BMP server.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct BmpServerConfig {
    // original -> gobgp:address
    // gobgp:address's original type is inet:ip-address.
    // Reference to the address of the BMP server used as
    // a key in the BMP server list.
    pub(crate) address: Option<String>,
    // original -> gobgp:port
    // Reference to the port of the BMP server.
    pub(crate) port: Option<u32>,
    // original -> gobgp:route-monitoring-policy
    #[serde(rename = "route-monitoring-policy")]
    pub(crate) route_monitoring_policy: Option<BmpRouteMonitoringPolicyType>,
    // original -> gobgp:statistics-timeout
    // Interval seconds of statistics messages sent to BMP server.
    #[serde(rename = "statistics-timeout")]
    pub(crate) statistics_timeout: Option<u16>,
    // original -> gobgp:route-mirroring-enabled
    // gobgp:route-mirroring-enabled's original type is boolean.
    // Enable feature for mirroring of received BGP messages
    // mainly for debugging purpose.
    #[serde(rename = "route-mirroring-enabled")]
    pub(crate) route_mirroring_enabled: Option<bool>,
    // original -> gobgp:sys-name
    // Reference to the SysName of the BMP server.
    #[serde(rename = "sys-name")]
    pub(crate) sys_name: Option<String>,
    // original -> gobgp:sys-descr
    // Reference to the SysDescr of the BMP server.
    #[serde(rename = "sys-descr")]
    pub(crate) sys_descr: Option<String>,
}
// struct for container gobgp:bmp-server.
// List of BMP servers configured on the local system.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct BmpServer {
    // original -> gobgp:address
    // original -> gobgp:bmp-server-config
    // Configuration parameters relating to BMP server.
    pub(crate) config: Option<BmpServerConfig>,
    // original -> gobgp:bmp-server-state
    // Configuration parameters relating to BMP server.
    pub(crate) state: Option<BmpServerState>,
}
// struct for container gobgp:rpki-received.
// Counters for reception RPKI Message types.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RpkiReceived {
    // original -> gobgp:serial-notify
    // Number of serial notify message received from RPKI server.
    #[serde(rename = "serial-notify")]
    pub(crate) serial_notify: Option<i64>,
    // original -> gobgp:cache-reset
    // Number of cache reset message received from RPKI server.
    #[serde(rename = "cache-reset")]
    pub(crate) cache_reset: Option<i64>,
    // original -> gobgp:cache-response
    // Number of cache response message received from RPKI server.
    #[serde(rename = "cache-response")]
    pub(crate) cache_response: Option<i64>,
    // original -> gobgp:ipv4-prefix
    // Number of ipv4 prefix message received from RPKI server.
    #[serde(rename = "ipv4-prefix")]
    pub(crate) ipv4_prefix: Option<i64>,
    // original -> gobgp:ipv6-prefix
    // Number of ipv6 prefix message received from RPKI server.
    #[serde(rename = "ipv6-prefix")]
    pub(crate) ipv6_prefix: Option<i64>,
    // original -> gobgp:end-of-data
    // Number of end of data message received from RPKI server.
    #[serde(rename = "end-of-data")]
    pub(crate) end_of_data: Option<i64>,
    // original -> gobgp:error
    // Number of error message received from RPKI server.
    pub(crate) error: Option<i64>,
}
// struct for container gobgp:rpki-sent.
// Counters for transmission RPKI Message types.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RpkiSent {
    // original -> gobgp:serial-query
    // Number of serial query message sent to RPKI server.
    #[serde(rename = "serial-query")]
    pub(crate) serial_query: Option<i64>,
    // original -> gobgp:reset-query
    // Number of reset query message sent to RPKI server.
    #[serde(rename = "reset-query")]
    pub(crate) reset_query: Option<i64>,
    // original -> gobgp:error
    // Number of error message sent to RPKI server.
    pub(crate) error: Option<i64>,
}
// struct for container gobgp:rpki-messages.
// Counters for transmission and reception RPKI Message types.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RpkiMessages {
    // original -> gobgp:rpki-sent
    // Counters for transmission RPKI Message types.
    #[serde(rename = "rpki-sent")]
    pub(crate) rpki_sent: Option<RpkiSent>,
    // original -> gobgp:rpki-received
    // Counters for reception RPKI Message types.
    #[serde(rename = "rpki-received")]
    pub(crate) rpki_received: Option<RpkiReceived>,
}
// struct for container gobgp:state.
// State information relating to RPKI server.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RpkiServerState {
    // original -> gobgp:up
    // gobgp:up's original type is boolean.
    pub(crate) up: Option<bool>,
    // original -> gobgp:serial-number
    #[serde(rename = "serial-number")]
    pub(crate) serial_number: Option<u32>,
    // original -> gobgp:records-v4
    #[serde(rename = "records-v4")]
    pub(crate) records_v4: Option<u32>,
    // original -> gobgp:records-v6
    #[serde(rename = "records-v6")]
    pub(crate) records_v6: Option<u32>,
    // original -> gobgp:prefixes-v4
    #[serde(rename = "prefixes-v4")]
    pub(crate) prefixes_v4: Option<u32>,
    // original -> gobgp:prefixes-v6
    #[serde(rename = "prefixes-v6")]
    pub(crate) prefixes_v6: Option<u32>,
    // original -> gobgp:uptime
    // This timer determines the amount of time since the
    // RPKI last transitioned in of the Established state.
    pub(crate) uptime: Option<i64>,
    // original -> gobgp:downtime
    // This timer determines the amount of time since the
    // RPKI last transitioned out of the Established state.
    pub(crate) downtime: Option<i64>,
    // original -> gobgp:last-pdu-recv-time
    // last time the received an pdu message from RPKI server.
    #[serde(rename = "last-pdu-recv-time")]
    pub(crate) last_pdu_recv_time: Option<i64>,
    // original -> gobgp:rpki-messages
    // Counters for transmission and reception RPKI Message types.
    #[serde(rename = "rpki-messages")]
    pub(crate) rpki_messages: Option<RpkiMessages>,
}
// struct for container gobgp:config.
// Configuration parameters relating to RPKI server.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RpkiServerConfig {
    // original -> gobgp:address
    // gobgp:address's original type is inet:ip-address.
    // Reference to the address of the RPKI server used as
    // a key in the RPKI server list.
    pub(crate) address: Option<String>,
    // original -> gobgp:port
    // Reference to the port of the RPKI server.
    pub(crate) port: Option<u32>,
    // original -> gobgp:refresh-time
    // Check interval for a configured RPKI server.
    #[serde(rename = "refresh-time")]
    pub(crate) refresh_time: Option<i64>,
    // original -> gobgp:hold-time
    // Specify the length of time in seconds that the session between
    // the router and RPKI server is to be considered operational
    // without any activity.
    #[serde(rename = "hold-time")]
    pub(crate) hold_time: Option<i64>,
    // original -> gobgp:record-lifetime
    // Indicate the expiration date of the route validation recode
    // received from RPKI server.
    #[serde(rename = "record-lifetime")]
    pub(crate) record_lifetime: Option<i64>,
    // original -> gobgp:preference
    // RPKI server has a static preference.
    // Higher the preference values indicates a higher priority RPKI server.
    pub(crate) preference: Option<u8>,
}
// struct for container gobgp:rpki-server.
// List of RPKI servers configured on the local system.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RpkiServer {
    // original -> gobgp:address
    // original -> gobgp:rpki-server-config
    // Configuration parameters relating to RPKI server.
    pub(crate) config: Option<RpkiServerConfig>,
    // original -> gobgp:rpki-server-state
    // State information relating to RPKI server.
    pub(crate) state: Option<RpkiServerState>,
}
// struct for container bgp:state.
// State information relating to the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct PeerGroupState {
    // original -> bgp:peer-as
    // bgp:peer-as's original type is inet:as-number.
    // AS number of the peer.
    #[serde(rename = "peer-as")]
    pub(crate) peer_as: Option<u32>,
    // original -> bgp:local-as
    // bgp:local-as's original type is inet:as-number.
    // The local autonomous system number that is to be used
    // when establishing sessions with the remote peer or peer
    // group, if this differs from the global BGP router
    // autonomous system number.
    #[serde(rename = "local-as")]
    pub(crate) local_as: Option<u32>,
    // original -> bgp:peer-type
    // Explicitly designate the peer or peer group as internal
    // (iBGP) or external (eBGP).
    #[serde(rename = "peer-type")]
    pub(crate) peer_type: Option<PeerType>,
    // original -> bgp:auth-password
    // Configures an MD5 authentication password for use with
    // neighboring devices.
    #[serde(rename = "auth-password")]
    pub(crate) auth_password: Option<String>,
    // original -> bgp:remove-private-as
    // Remove private AS numbers from updates sent to peers.
    #[serde(rename = "remove-private-as")]
    pub(crate) remove_private_as: Option<RemovePrivateAsOption>,
    // original -> bgp:route-flap-damping
    // bgp:route-flap-damping's original type is boolean.
    // Enable route flap damping.
    #[serde(rename = "route-flap-damping")]
    pub(crate) route_flap_damping: Option<bool>,
    // original -> bgp:send-community
    // Specify which types of community should be sent to the
    // neighbor or group. The default is to not send the
    // community attribute.
    #[serde(rename = "send-community")]
    pub(crate) send_community: Option<CommunityType>,
    // original -> bgp:description
    // An optional textual description (intended primarily for use
    // with a peer or group.
    pub(crate) description: Option<String>,
    // original -> bgp:peer-group-name
    // Name of the BGP peer-group.
    #[serde(rename = "peer-group-name")]
    pub(crate) peer_group_name: Option<String>,
    // original -> bgp-op:total-paths
    // Total number of BGP paths within the context.
    #[serde(rename = "total-paths")]
    pub(crate) total_paths: Option<u32>,
    // original -> bgp-op:total-prefixes
    // .
    #[serde(rename = "total-prefixes")]
    pub(crate) total_prefixes: Option<u32>,
}
// struct for container bgp:config.
// Configuration parameters relating to the BGP neighbor or
// group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct PeerGroupConfig {
    // original -> bgp:peer-as
    // bgp:peer-as's original type is inet:as-number.
    // AS number of the peer.
    #[serde(rename = "peer-as")]
    pub(crate) peer_as: Option<u32>,
    // original -> bgp:local-as
    // bgp:local-as's original type is inet:as-number.
    // The local autonomous system number that is to be used
    // when establishing sessions with the remote peer or peer
    // group, if this differs from the global BGP router
    // autonomous system number.
    #[serde(rename = "local-as")]
    pub(crate) local_as: Option<u32>,
    // original -> bgp:peer-type
    // Explicitly designate the peer or peer group as internal
    // (iBGP) or external (eBGP).
    #[serde(rename = "peer-type")]
    pub(crate) peer_type: Option<PeerType>,
    // original -> bgp:auth-password
    // Configures an MD5 authentication password for use with
    // neighboring devices.
    #[serde(rename = "auth-password")]
    pub(crate) auth_password: Option<String>,
    // original -> bgp:remove-private-as
    // Remove private AS numbers from updates sent to peers.
    #[serde(rename = "remove-private-as")]
    pub(crate) remove_private_as: Option<RemovePrivateAsOption>,
    // original -> bgp:route-flap-damping
    // bgp:route-flap-damping's original type is boolean.
    // Enable route flap damping.
    #[serde(rename = "route-flap-damping")]
    pub(crate) route_flap_damping: Option<bool>,
    // original -> bgp:send-community
    // Specify which types of community should be sent to the
    // neighbor or group. The default is to not send the
    // community attribute.
    #[serde(rename = "send-community")]
    pub(crate) send_community: Option<CommunityType>,
    // original -> bgp:description
    // An optional textual description (intended primarily for use
    // with a peer or group.
    pub(crate) description: Option<String>,
    // original -> bgp:peer-group-name
    // Name of the BGP peer-group.
    #[serde(rename = "peer-group-name")]
    pub(crate) peer_group_name: Option<String>,
}
// struct for container bgp:peer-group.
// List of BGP peer-groups configured on the local system -
// uniquely identified by peer-group name.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct PeerGroup {
    // original -> bgp:peer-group-name
    // original -> bgp:peer-group-config
    // Configuration parameters relating to the BGP neighbor or
    // group.
    pub(crate) config: Option<PeerGroupConfig>,
    // original -> bgp:peer-group-state
    // State information relating to the BGP neighbor or group.
    pub(crate) state: Option<PeerGroupState>,
    // original -> bgp:timers
    // Timers related to a BGP neighbor or group.
    pub(crate) timers: Option<Timers>,
    // original -> bgp:transport
    // Transport session parameters for the BGP neighbor or group.
    pub(crate) transport: Option<Transport>,
    // original -> bgp:error-handling
    // Error handling parameters used for the BGP neighbor or
    // group.
    #[serde(rename = "error-handling")]
    pub(crate) error_handling: Option<ErrorHandling>,
    // original -> bgp:logging-options
    // Logging options for events related to the BGP neighbor or
    // group.
    #[serde(rename = "logging-options")]
    pub(crate) logging_options: Option<LoggingOptions>,
    // original -> bgp:ebgp-multihop
    // eBGP multi-hop parameters for the BGP neighbor or group.
    #[serde(rename = "ebgp-multihop")]
    pub(crate) ebgp_multihop: Option<EbgpMultihop>,
    // original -> bgp:route-reflector
    // Route reflector parameters for the BGP neighbor or group.
    #[serde(rename = "route-reflector")]
    pub(crate) route_reflector: Option<RouteReflector>,
    // original -> bgp:as-path-options
    // AS_PATH manipulation parameters for the BGP neighbor or
    // group.
    #[serde(rename = "as-path-options")]
    pub(crate) as_path_options: Option<AsPathOptions>,
    // original -> bgp:add-paths
    // Parameters relating to the advertisement and receipt of
    // multiple paths for a single NLRI (add-paths).
    #[serde(rename = "add-paths")]
    pub(crate) add_paths: Option<AddPaths>,
    // original -> bgp:afi-safis
    // Per-address-family configuration parameters associated with
    // the neighbor or group.
    #[serde(rename = "afi-safis")]
    pub(crate) afi_safis: Option<Vec<AfiSafi>>,
    // original -> bgp:graceful-restart
    // Parameters relating the graceful restart mechanism for BGP.
    #[serde(rename = "graceful-restart")]
    pub(crate) graceful_restart: Option<GracefulRestart>,
    // original -> rpol:apply-policy
    // Anchor point for routing policies in the model.
    // Import and export policies are with respect to the local
    // routing table, i.e., export (send) and import (receive),
    // depending on the context.
    #[serde(rename = "apply-policy")]
    pub(crate) apply_policy: Option<ApplyPolicy>,
    // original -> bgp-mp:use-multiple-paths
    // Parameters related to the use of multiple paths for the
    // same NLRI.
    #[serde(rename = "use-multiple-paths")]
    pub(crate) use_multiple_paths: Option<UseMultiplePaths>,
    // original -> gobgp:route-server
    // Configure the local router as a route server.
    #[serde(rename = "route-server")]
    pub(crate) route_server: Option<RouteServer>,
    // original -> gobgp:ttl-security
    // Configure TTL Security feature.
    #[serde(rename = "ttl-security")]
    pub(crate) ttl_security: Option<TtlSecurity>,
}
// struct for container gobgp:state.
// State information for TTL Security.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct TtlSecurityState {
    // original -> gobgp:enabled
    // gobgp:enabled's original type is boolean.
    // Enable features for TTL Security.
    pub(crate) enabled: Option<bool>,
    // original -> gobgp:ttl-min
    // Reference to the port of the BMP server.
    #[serde(rename = "ttl-min")]
    pub(crate) ttl_min: Option<u8>,
}
// struct for container gobgp:config.
// Configuration parameters for TTL Security.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct TtlSecurityConfig {
    // original -> gobgp:enabled
    // gobgp:enabled's original type is boolean.
    // Enable features for TTL Security.
    pub(crate) enabled: Option<bool>,
    // original -> gobgp:ttl-min
    // Reference to the port of the BMP server.
    #[serde(rename = "ttl-min")]
    pub(crate) ttl_min: Option<u8>,
}
// struct for container gobgp:ttl-security.
// Configure TTL Security feature.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct TtlSecurity {
    // original -> gobgp:ttl-security-config
    // Configuration parameters for TTL Security.
    pub(crate) config: Option<TtlSecurityConfig>,
    // original -> gobgp:ttl-security-state
    // State information for TTL Security.
    pub(crate) state: Option<TtlSecurityState>,
}
// struct for container gobgp:state.
// State information relating to route server
// client(s) used for the BGP neighbor.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteServerState {
    // original -> gobgp:route-server-client
    // gobgp:route-server-client's original type is boolean.
    // Configure the neighbor as a route server client.
    #[serde(rename = "route-server-client")]
    pub(crate) route_server_client: Option<bool>,
    // original -> gobgp:secondary-route
    // gobgp:secondary-route's original type is boolean.
    // if an export policy rejects a selected route, try the next route in
    // order until one that is accepted is found or all routes for the peer
    // are rejected.
    #[serde(rename = "secondary-route")]
    pub(crate) secondary_route: Option<bool>,
}
// struct for container gobgp:config.
// Configuration parameters relating to route server
// client(s) used for the BGP neighbor.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteServerConfig {
    // original -> gobgp:route-server-client
    // gobgp:route-server-client's original type is boolean.
    // Configure the neighbor as a route server client.
    #[serde(rename = "route-server-client")]
    pub(crate) route_server_client: Option<bool>,
    // original -> gobgp:secondary-route
    // gobgp:secondary-route's original type is boolean.
    // if an export policy rejects a selected route, try the next route in
    // order until one that is accepted is found or all routes for the peer
    // are rejected.
    #[serde(rename = "secondary-route")]
    pub(crate) secondary_route: Option<bool>,
}
// struct for container gobgp:route-server.
// Configure the local router as a route server.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteServer {
    // original -> gobgp:route-server-config
    // Configuration parameters relating to route server
    // client(s) used for the BGP neighbor.
    pub(crate) config: Option<RouteServerConfig>,
    // original -> gobgp:route-server-state
    // State information relating to route server
    // client(s) used for the BGP neighbor.
    pub(crate) state: Option<RouteServerState>,
}
// struct for container bgp-op:prefixes.
// Prefix counters for the BGP session.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Prefixes {
    // original -> bgp-op:received
    // The number of prefixes received from the neighbor.
    pub(crate) received: Option<u32>,
    // original -> bgp-op:sent
    // The number of prefixes advertised to the neighbor.
    pub(crate) sent: Option<u32>,
    // original -> bgp-op:installed
    // The number of advertised prefixes installed in the
    // Loc-RIB.
    pub(crate) installed: Option<u32>,
}
// struct for container bgp:state.
// State information associated with ADD_PATHS.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AddPathsState {
    // original -> bgp:receive
    // bgp:receive's original type is boolean.
    // Enable ability to receive multiple path advertisements
    // for an NLRI from the neighbor or group.
    pub(crate) receive: Option<bool>,
    // original -> bgp:send-max
    // The maximum number of paths to advertise to neighbors
    // for a single NLRI.
    #[serde(rename = "send-max")]
    pub(crate) send_max: Option<u8>,
}
// struct for container bgp:config.
// Configuration parameters relating to ADD_PATHS.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AddPathsConfig {
    // original -> bgp:receive
    // bgp:receive's original type is boolean.
    // Enable ability to receive multiple path advertisements
    // for an NLRI from the neighbor or group.
    pub(crate) receive: Option<bool>,
    // original -> bgp:send-max
    // The maximum number of paths to advertise to neighbors
    // for a single NLRI.
    #[serde(rename = "send-max")]
    pub(crate) send_max: Option<u8>,
}
// struct for container bgp:add-paths.
// Parameters relating to the advertisement and receipt of
// multiple paths for a single NLRI (add-paths).
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AddPaths {
    // original -> bgp:add-paths-config
    // Configuration parameters relating to ADD_PATHS.
    pub(crate) config: Option<AddPathsConfig>,
    // original -> bgp:add-paths-state
    // State information associated with ADD_PATHS.
    pub(crate) state: Option<AddPathsState>,
}
// struct for container bgp:state.
// State information relating to the AS_PATH manipulation
// mechanisms for the BGP peer or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AsPathOptionsState {
    // original -> bgp:allow-own-as
    // Specify the number of occurrences of the local BGP speaker's
    // AS that can occur within the AS_PATH before it is rejected.
    #[serde(rename = "allow-own-as")]
    pub(crate) allow_own_as: Option<u8>,
    // original -> bgp:replace-peer-as
    // bgp:replace-peer-as's original type is boolean.
    // Replace occurrences of the peer's AS in the AS_PATH
    // with the local autonomous system number.
    #[serde(rename = "replace-peer-as")]
    pub(crate) replace_peer_as: Option<bool>,
}
// struct for container bgp:config.
// Configuration parameters relating to AS_PATH manipulation
// for the BGP peer or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AsPathOptionsConfig {
    // original -> bgp:allow-own-as
    // Specify the number of occurrences of the local BGP speaker's
    // AS that can occur within the AS_PATH before it is rejected.
    #[serde(rename = "allow-own-as")]
    pub(crate) allow_own_as: Option<u8>,
    // original -> bgp:replace-peer-as
    // bgp:replace-peer-as's original type is boolean.
    // Replace occurrences of the peer's AS in the AS_PATH
    // with the local autonomous system number.
    #[serde(rename = "replace-peer-as")]
    pub(crate) replace_peer_as: Option<bool>,
}
// struct for container bgp:as-path-options.
// AS_PATH manipulation parameters for the BGP neighbor or
// group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AsPathOptions {
    // original -> bgp:as-path-options-config
    // Configuration parameters relating to AS_PATH manipulation
    // for the BGP peer or group.
    pub(crate) config: Option<AsPathOptionsConfig>,
    // original -> bgp:as-path-options-state
    // State information relating to the AS_PATH manipulation
    // mechanisms for the BGP peer or group.
    pub(crate) state: Option<AsPathOptionsState>,
}
// struct for container bgp:state.
// State information relating to route reflection for the
// BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteReflectorState {
    // original -> bgp:route-reflector-cluster-id
    // route-reflector cluster id to use when local router is
    // configured as a route reflector.  Commonly set at the group
    // level, but allows a different cluster
    // id to be set for each neighbor.
    #[serde(rename = "route-reflector-cluster-id")]
    pub(crate) route_reflector_cluster_id: Option<RrClusterIdType>,
    // original -> bgp:route-reflector-client
    // bgp:route-reflector-client's original type is boolean.
    // Configure the neighbor as a route reflector client.
    #[serde(rename = "route-reflector-client")]
    pub(crate) route_reflector_client: Option<bool>,
}
// struct for container bgp:config.
// Configuration parameters relating to route reflection
// for the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteReflectorConfig {
    // original -> bgp:route-reflector-cluster-id
    // route-reflector cluster id to use when local router is
    // configured as a route reflector.  Commonly set at the group
    // level, but allows a different cluster
    // id to be set for each neighbor.
    #[serde(rename = "route-reflector-cluster-id")]
    pub(crate) route_reflector_cluster_id: Option<RrClusterIdType>,
    // original -> bgp:route-reflector-client
    // bgp:route-reflector-client's original type is boolean.
    // Configure the neighbor as a route reflector client.
    #[serde(rename = "route-reflector-client")]
    pub(crate) route_reflector_client: Option<bool>,
}
// struct for container bgp:route-reflector.
// Route reflector parameters for the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteReflector {
    // original -> bgp:route-reflector-config
    // Configuration parameters relating to route reflection
    // for the BGP neighbor or group.
    pub(crate) config: Option<RouteReflectorConfig>,
    // original -> bgp:route-reflector-state
    // State information relating to route reflection for the
    // BGP neighbor or group.
    pub(crate) state: Option<RouteReflectorState>,
}
// struct for container bgp:state.
// State information for eBGP multihop, for the BGP neighbor
// or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct EbgpMultihopState {
    // original -> bgp:enabled
    // bgp:enabled's original type is boolean.
    // When enabled the referenced group or neighbors are permitted
    // to be indirectly connected - including cases where the TTL
    // can be decremented between the BGP peers.
    pub(crate) enabled: Option<bool>,
    // original -> bgp:multihop-ttl
    // Time-to-live value to use when packets are sent to the
    // referenced group or neighbors and ebgp-multihop is enabled.
    #[serde(rename = "multihop-ttl")]
    pub(crate) multihop_ttl: Option<u8>,
}
// struct for container bgp:config.
// Configuration parameters relating to eBGP multihop for the
// BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct EbgpMultihopConfig {
    // original -> bgp:enabled
    // bgp:enabled's original type is boolean.
    // When enabled the referenced group or neighbors are permitted
    // to be indirectly connected - including cases where the TTL
    // can be decremented between the BGP peers.
    pub(crate) enabled: Option<bool>,
    // original -> bgp:multihop-ttl
    // Time-to-live value to use when packets are sent to the
    // referenced group or neighbors and ebgp-multihop is enabled.
    #[serde(rename = "multihop-ttl")]
    pub(crate) multihop_ttl: Option<u8>,
}
// struct for container bgp:ebgp-multihop.
// eBGP multi-hop parameters for the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct EbgpMultihop {
    // original -> bgp:ebgp-multihop-config
    // Configuration parameters relating to eBGP multihop for the
    // BGP neighbor or group.
    pub(crate) config: Option<EbgpMultihopConfig>,
    // original -> bgp:ebgp-multihop-state
    // State information for eBGP multihop, for the BGP neighbor
    // or group.
    pub(crate) state: Option<EbgpMultihopState>,
}
// struct for container bgp:state.
// State information relating to logging for the BGP neighbor
// or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct LoggingOptionsState {
    // original -> bgp:log-neighbor-state-changes
    // bgp:log-neighbor-state-changes's original type is boolean.
    // Configure logging of peer state changes.  Default is
    // to enable logging of peer state changes.
    #[serde(rename = "log-neighbor-state-changes")]
    pub(crate) log_neighbor_state_changes: Option<bool>,
}
// struct for container bgp:config.
// Configuration parameters enabling or modifying logging
// for events relating to the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct LoggingOptionsConfig {
    // original -> bgp:log-neighbor-state-changes
    // bgp:log-neighbor-state-changes's original type is boolean.
    // Configure logging of peer state changes.  Default is
    // to enable logging of peer state changes.
    #[serde(rename = "log-neighbor-state-changes")]
    pub(crate) log_neighbor_state_changes: Option<bool>,
}
// struct for container bgp:logging-options.
// Logging options for events related to the BGP neighbor or
// group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct LoggingOptions {
    // original -> bgp:logging-options-config
    // Configuration parameters enabling or modifying logging
    // for events relating to the BGP neighbor or group.
    pub(crate) config: Option<LoggingOptionsConfig>,
    // original -> bgp:logging-options-state
    // State information relating to logging for the BGP neighbor
    // or group.
    pub(crate) state: Option<LoggingOptionsState>,
}
// struct for container bgp:state.
// State information relating to enhanced error handling
// mechanisms for the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ErrorHandlingState {
    // original -> bgp:treat-as-withdraw
    // bgp:treat-as-withdraw's original type is boolean.
    // Specify whether erroneous UPDATE messages for which the
    // NLRI can be extracted are reated as though the NLRI is
    // withdrawn - avoiding session reset.
    #[serde(rename = "treat-as-withdraw")]
    pub(crate) treat_as_withdraw: Option<bool>,
    // original -> bgp-op:erroneous-update-messages
    // The number of BGP UPDATE messages for which the
    // treat-as-withdraw mechanism has been applied based
    // on erroneous message contents.
    #[serde(rename = "erroneous-update-messages")]
    pub(crate) erroneous_update_messages: Option<u32>,
}
// struct for container bgp:config.
// Configuration parameters enabling or modifying the
// behavior or enhanced error handling mechanisms for the BGP
// neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ErrorHandlingConfig {
    // original -> bgp:treat-as-withdraw
    // bgp:treat-as-withdraw's original type is boolean.
    // Specify whether erroneous UPDATE messages for which the
    // NLRI can be extracted are reated as though the NLRI is
    // withdrawn - avoiding session reset.
    #[serde(rename = "treat-as-withdraw")]
    pub(crate) treat_as_withdraw: Option<bool>,
}
// struct for container bgp:error-handling.
// Error handling parameters used for the BGP neighbor or
// group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ErrorHandling {
    // original -> bgp:error-handling-config
    // Configuration parameters enabling or modifying the
    // behavior or enhanced error handling mechanisms for the BGP
    // neighbor or group.
    pub(crate) config: Option<ErrorHandlingConfig>,
    // original -> bgp:error-handling-state
    // State information relating to enhanced error handling
    // mechanisms for the BGP neighbor or group.
    pub(crate) state: Option<ErrorHandlingState>,
}
// struct for container bgp:state.
// State information relating to the transport session(s)
// used for the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct TransportState {
    // original -> bgp:tcp-mss
    // Sets the max segment size for BGP TCP sessions.
    #[serde(rename = "tcp-mss")]
    pub(crate) tcp_mss: Option<u16>,
    // original -> bgp:mtu-discovery
    // bgp:mtu-discovery's original type is boolean.
    // Turns path mtu discovery for BGP TCP sessions on (true)
    // or off (false).
    #[serde(rename = "mtu-discovery")]
    pub(crate) mtu_discovery: Option<bool>,
    // original -> bgp:passive-mode
    // bgp:passive-mode's original type is boolean.
    // Wait for peers to issue requests to open a BGP session,
    // rather than initiating sessions from the local router.
    #[serde(rename = "passive-mode")]
    pub(crate) passive_mode: Option<bool>,
    // original -> bgp:local-address
    // bgp:local-address's original type is union.
    // Set the local IP (either IPv4 or IPv6) address to use
    // for the session when sending BGP update messages.  This
    // may be expressed as either an IP address or reference
    // to the name of an interface.
    #[serde(rename = "local-address")]
    pub(crate) local_address: Option<String>,
    // original -> bgp-op:local-port
    // bgp-op:local-port's original type is inet:port-number.
    // Local TCP port being used for the TCP session supporting
    // the BGP session.
    #[serde(rename = "local-port")]
    pub(crate) local_port: Option<u16>,
    // original -> bgp-op:remote-address
    // bgp-op:remote-address's original type is inet:ip-address.
    // Remote address to which the BGP session has been
    // established.
    #[serde(rename = "remote-address")]
    pub(crate) remote_address: Option<String>,
    // original -> bgp-op:remote-port
    // bgp-op:remote-port's original type is inet:port-number.
    // Remote port being used by the peer for the TCP session
    // supporting the BGP session.
    #[serde(rename = "remote-port")]
    pub(crate) remote_port: Option<u16>,
}
// struct for container bgp:config.
// Configuration parameters relating to the transport
// session(s) used for the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct TransportConfig {
    // original -> bgp:tcp-mss
    // Sets the max segment size for BGP TCP sessions.
    #[serde(rename = "tcp-mss")]
    pub(crate) tcp_mss: Option<u16>,
    // original -> bgp:mtu-discovery
    // bgp:mtu-discovery's original type is boolean.
    // Turns path mtu discovery for BGP TCP sessions on (true)
    // or off (false).
    #[serde(rename = "mtu-discovery")]
    pub(crate) mtu_discovery: Option<bool>,
    // original -> bgp:passive-mode
    // bgp:passive-mode's original type is boolean.
    // Wait for peers to issue requests to open a BGP session,
    // rather than initiating sessions from the local router.
    #[serde(rename = "passive-mode")]
    pub(crate) passive_mode: Option<bool>,
    // original -> bgp:local-address
    // bgp:local-address's original type is union.
    // Set the local IP (either IPv4 or IPv6) address to use
    // for the session when sending BGP update messages.  This
    // may be expressed as either an IP address or reference
    // to the name of an interface.
    #[serde(rename = "local-address")]
    pub(crate) local_address: Option<String>,
    // original -> gobgp:remote-port
    // gobgp:remote-port's original type is inet:port-number.
    #[serde(rename = "remote-port")]
    pub(crate) remote_port: Option<u16>,
    // original -> gobgp:ttl
    // TTL value for BGP packets.
    pub(crate) ttl: Option<u8>,
    // original -> gobgp:bind-interface
    // Interface name for binding.
    #[serde(rename = "bind-interface")]
    pub(crate) bind_interface: Option<String>,
}
// struct for container bgp:transport.
// Transport session parameters for the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Transport {
    // original -> bgp:transport-config
    // Configuration parameters relating to the transport
    // session(s) used for the BGP neighbor or group.
    pub(crate) config: Option<TransportConfig>,
    // original -> bgp:transport-state
    // State information relating to the transport session(s)
    // used for the BGP neighbor or group.
    pub(crate) state: Option<TransportState>,
}
// struct for container bgp:state.
// State information relating to the timers used for the BGP
// neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct TimersState {
    // original -> bgp:connect-retry
    // bgp:connect-retry's original type is decimal64.
    // Time interval in seconds between attempts to establish a
    // session with the peer.
    #[serde(rename = "connect-retry")]
    pub(crate) connect_retry: Option<f64>,
    // original -> bgp:hold-time
    // bgp:hold-time's original type is decimal64.
    // Time interval in seconds that a BGP session will be
    // considered active in the absence of keepalive or other
    // messages from the peer.  The hold-time is typically
    // set to 3x the keepalive-interval.
    #[serde(rename = "hold-time")]
    pub(crate) hold_time: Option<f64>,
    // original -> bgp:keepalive-interval
    // bgp:keepalive-interval's original type is decimal64.
    // Time interval in seconds between transmission of keepalive
    // messages to the neighbor.  Typically set to 1/3 the
    // hold-time.
    #[serde(rename = "keepalive-interval")]
    pub(crate) keepalive_interval: Option<f64>,
    // original -> bgp:minimum-advertisement-interval
    // bgp:minimum-advertisement-interval's original type is decimal64.
    // Minimum time which must elapse between subsequent UPDATE
    // messages relating to a common set of NLRI being transmitted
    // to a peer. This timer is referred to as
    // MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to
    // reduce the number of UPDATE messages transmitted when a
    // particular set of NLRI exhibit instability.
    #[serde(rename = "minimum-advertisement-interval")]
    pub(crate) minimum_advertisement_interval: Option<f64>,
    // original -> bgp-op:uptime
    // bgp-op:uptime's original type is yang:timeticks.
    // This timer determines the amount of time since the
    // BGP last transitioned in or out of the Established
    // state.
    pub(crate) uptime: Option<i64>,
    // original -> bgp-op:negotiated-hold-time
    // bgp-op:negotiated-hold-time's original type is decimal64.
    // The negotiated hold-time for the BGP session.
    #[serde(rename = "negotiated-hold-time")]
    pub(crate) negotiated_hold_time: Option<f64>,
    // original -> gobgp:idle-hold-time-after-reset
    // gobgp:idle-hold-time-after-reset's original type is decimal64.
    // Time interval in seconds that a BGP session will be
    // in idle state after neighbor reset operation.
    #[serde(rename = "idle-hold-time-after-reset")]
    pub(crate) idle_hold_time_after_reset: Option<f64>,
    // original -> gobgp:downtime
    // gobgp:downtime's original type is yang:timeticks.
    // This timer determines the amount of time since the
    // BGP last transitioned out of the Established state.
    pub(crate) downtime: Option<i64>,
    // original -> gobgp:update-recv-time
    // The number of seconds elapsed since January 1, 1970 UTC
    // last time the BGP session received an UPDATE message.
    #[serde(rename = "update-recv-time")]
    pub(crate) update_recv_time: Option<i64>,
}
// struct for container bgp:config.
// Configuration parameters relating to timers used for the
// BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct TimersConfig {
    // original -> bgp:connect-retry
    // bgp:connect-retry's original type is decimal64.
    // Time interval in seconds between attempts to establish a
    // session with the peer.
    #[serde(rename = "connect-retry")]
    pub(crate) connect_retry: Option<f64>,
    // original -> bgp:hold-time
    // bgp:hold-time's original type is decimal64.
    // Time interval in seconds that a BGP session will be
    // considered active in the absence of keepalive or other
    // messages from the peer.  The hold-time is typically
    // set to 3x the keepalive-interval.
    #[serde(rename = "hold-time")]
    pub(crate) hold_time: Option<f64>,
    // original -> bgp:keepalive-interval
    // bgp:keepalive-interval's original type is decimal64.
    // Time interval in seconds between transmission of keepalive
    // messages to the neighbor.  Typically set to 1/3 the
    // hold-time.
    #[serde(rename = "keepalive-interval")]
    pub(crate) keepalive_interval: Option<f64>,
    // original -> bgp:minimum-advertisement-interval
    // bgp:minimum-advertisement-interval's original type is decimal64.
    // Minimum time which must elapse between subsequent UPDATE
    // messages relating to a common set of NLRI being transmitted
    // to a peer. This timer is referred to as
    // MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to
    // reduce the number of UPDATE messages transmitted when a
    // particular set of NLRI exhibit instability.
    #[serde(rename = "minimum-advertisement-interval")]
    pub(crate) minimum_advertisement_interval: Option<f64>,
    // original -> gobgp:idle-hold-time-after-reset
    // gobgp:idle-hold-time-after-reset's original type is decimal64.
    // Time interval in seconds that a BGP session will be
    // in idle state after neighbor reset operation.
    #[serde(rename = "idle-hold-time-after-reset")]
    pub(crate) idle_hold_time_after_reset: Option<f64>,
}
// struct for container bgp:timers.
// Timers related to a BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Timers {
    // original -> bgp:timers-config
    // Configuration parameters relating to timers used for the
    // BGP neighbor or group.
    pub(crate) config: Option<TimersConfig>,
    // original -> bgp:timers-state
    // State information relating to the timers used for the BGP
    // neighbor or group.
    pub(crate) state: Option<TimersState>,
}
// struct for container gobgp:adj-table.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AdjTable {
    // original -> gobgp:ADVERTISED
    pub(crate) advertised: Option<u32>,
    // original -> gobgp:FILTERED
    pub(crate) filtered: Option<u32>,
    // original -> gobgp:RECEIVED
    pub(crate) received: Option<u32>,
    // original -> gobgp:ACCEPTED
    pub(crate) accepted: Option<u32>,
}
// struct for container bgp:queues.
// Counters related to queued messages associated with the
// BGP neighbor.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Queues {
    // original -> bgp-op:input
    // The number of messages received from the peer currently
    // queued.
    pub(crate) input: Option<u32>,
    // original -> bgp-op:output
    // The number of messages queued to be sent to the peer.
    pub(crate) output: Option<u32>,
}
// struct for container bgp:received.
// Counters for BGP messages received from the neighbor.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Received {
    // original -> bgp-op:UPDATE
    // Number of BGP UPDATE messages announcing, withdrawing
    // or modifying paths exchanged.
    pub(crate) update: Option<u64>,
    // original -> bgp-op:NOTIFICATION
    // Number of BGP NOTIFICATION messages indicating an
    // error condition has occurred exchanged.
    pub(crate) notification: Option<u64>,
    // original -> gobgp:OPEN
    // Number of BGP open messages announcing, withdrawing
    // or modifying paths exchanged.
    pub(crate) open: Option<u64>,
    // original -> gobgp:REFRESH
    // Number of BGP Route-Refresh messages indicating an
    // error condition has occurred exchanged.
    pub(crate) refresh: Option<u64>,
    // original -> gobgp:KEEPALIVE
    // Number of BGP Keepalive messages indicating an
    // error condition has occurred exchanged.
    pub(crate) keepalive: Option<u64>,
    // original -> gobgp:DYNAMIC-CAP
    // Number of BGP dynamic-cap messages indicating an
    // error condition has occurred exchanged.
    #[serde(rename = "dynamic-cap")]
    pub(crate) dynamic_cap: Option<u64>,
    // original -> gobgp:WITHDRAW-UPDATE
    // Number of updates subjected to treat-as-withdraw treatment.
    #[serde(rename = "withdraw-update")]
    pub(crate) withdraw_update: Option<u32>,
    // original -> gobgp:WITHDRAW-PREFIX
    // Number of prefixes subjected to treat-as-withdraw treatment.
    #[serde(rename = "withdraw-prefix")]
    pub(crate) withdraw_prefix: Option<u32>,
    // original -> gobgp:DISCARDED
    // Number of discarded messages indicating an
    // error condition has occurred exchanged.
    pub(crate) discarded: Option<u64>,
    // original -> gobgp:TOTAL
    // Number of total messages indicating an
    // error condition has occurred exchanged.
    pub(crate) total: Option<u64>,
}
// struct for container bgp:sent.
// Counters relating to BGP messages sent to the neighbor.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Sent {
    // original -> bgp-op:UPDATE
    // Number of BGP UPDATE messages announcing, withdrawing
    // or modifying paths exchanged.
    pub(crate) update: Option<u64>,
    // original -> bgp-op:NOTIFICATION
    // Number of BGP NOTIFICATION messages indicating an
    // error condition has occurred exchanged.
    pub(crate) notification: Option<u64>,
    // original -> gobgp:OPEN
    // Number of BGP open messages announcing, withdrawing
    // or modifying paths exchanged.
    pub(crate) open: Option<u64>,
    // original -> gobgp:REFRESH
    // Number of BGP Route-Refresh messages indicating an
    // error condition has occurred exchanged.
    pub(crate) refresh: Option<u64>,
    // original -> gobgp:KEEPALIVE
    // Number of BGP Keepalive messages indicating an
    // error condition has occurred exchanged.
    pub(crate) keepalive: Option<u64>,
    // original -> gobgp:DYNAMIC-CAP
    // Number of BGP dynamic-cap messages indicating an
    // error condition has occurred exchanged.
    #[serde(rename = "dynamic-cap")]
    pub(crate) dynamic_cap: Option<u64>,
    // original -> gobgp:WITHDRAW-UPDATE
    // Number of updates subjected to treat-as-withdraw treatment.
    #[serde(rename = "withdraw-update")]
    pub(crate) withdraw_update: Option<u32>,
    // original -> gobgp:WITHDRAW-PREFIX
    // Number of prefixes subjected to treat-as-withdraw treatment.
    #[serde(rename = "withdraw-prefix")]
    pub(crate) withdraw_prefix: Option<u32>,
    // original -> gobgp:DISCARDED
    // Number of discarded messages indicating an
    // error condition has occurred exchanged.
    pub(crate) discarded: Option<u64>,
    // original -> gobgp:TOTAL
    // Number of total messages indicating an
    // error condition has occurred exchanged.
    pub(crate) total: Option<u64>,
}
// struct for container bgp:messages.
// Counters for BGP messages sent and received from the
// neighbor.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Messages {
    // original -> bgp:sent
    // Counters relating to BGP messages sent to the neighbor.
    pub(crate) sent: Option<Sent>,
    // original -> bgp:received
    // Counters for BGP messages received from the neighbor.
    pub(crate) received: Option<Received>,
}
// struct for container bgp:state.
// State information relating to the BGP neighbor or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct NeighborState {
    // original -> bgp:peer-as
    // bgp:peer-as's original type is inet:as-number.
    // AS number of the peer.
    #[serde(rename = "peer-as")]
    pub(crate) peer_as: Option<u32>,
    // original -> bgp:local-as
    // bgp:local-as's original type is inet:as-number.
    // The local autonomous system number that is to be used
    // when establishing sessions with the remote peer or peer
    // group, if this differs from the global BGP router
    // autonomous system number.
    #[serde(rename = "local-as")]
    pub(crate) local_as: Option<u32>,
    // original -> bgp:peer-type
    // Explicitly designate the peer or peer group as internal
    // (iBGP) or external (eBGP).
    #[serde(rename = "peer-type")]
    pub(crate) peer_type: Option<PeerType>,
    // original -> bgp:auth-password
    // Configures an MD5 authentication password for use with
    // neighboring devices.
    #[serde(rename = "auth-password")]
    pub(crate) auth_password: Option<String>,
    // original -> bgp:remove-private-as
    // Remove private AS numbers from updates sent to peers.
    #[serde(rename = "remove-private-as")]
    pub(crate) remove_private_as: Option<RemovePrivateAsOption>,
    // original -> bgp:route-flap-damping
    // bgp:route-flap-damping's original type is boolean.
    // Enable route flap damping.
    #[serde(rename = "route-flap-damping")]
    pub(crate) route_flap_damping: Option<bool>,
    // original -> bgp:send-community
    // Specify which types of community should be sent to the
    // neighbor or group. The default is to not send the
    // community attribute.
    #[serde(rename = "send-community")]
    pub(crate) send_community: Option<CommunityType>,
    // original -> bgp:description
    // An optional textual description (intended primarily for use
    // with a peer or group.
    pub(crate) description: Option<String>,
    // original -> bgp:peer-group
    // The peer-group with which this neighbor is associated.
    #[serde(rename = "peer-group")]
    pub(crate) peer_group: Option<String>,
    // original -> bgp:neighbor-address
    // bgp:neighbor-address's original type is inet:ip-address.
    // Address of the BGP peer, either in IPv4 or IPv6.
    #[serde(rename = "neighbor-address")]
    pub(crate) neighbor_address: Option<String>,
    // original -> bgp-op:session-state
    // Operational state of the BGP peer.
    #[serde(rename = "session-state")]
    pub(crate) session_state: Option<SessionState>,
    // original -> bgp-op:supported-capabilities
    // BGP capabilities negotiated as supported with the peer.
    #[serde(rename = "supported-capabilities-list")]
    pub(crate) supported_capabilities_list: Option<Vec<BgpCapability>>,
    // original -> bgp:messages
    // Counters for BGP messages sent and received from the
    // neighbor.
    pub(crate) messages: Option<Messages>,
    // original -> bgp:queues
    // Counters related to queued messages associated with the
    // BGP neighbor.
    pub(crate) queues: Option<Queues>,
    // original -> gobgp:adj-table
    #[serde(rename = "adj-table")]
    pub(crate) adj_table: Option<AdjTable>,
    // original -> gobgp:remote-capability
    // original type is list of bgp-capability
    #[serde(rename = "remote-capability-list")]
    pub(crate) remote_capability_list: Option<Vec<Vec<u8>>>,
    // original -> gobgp:local-capability
    // original type is list of bgp-capability
    #[serde(rename = "local-capability-list")]
    pub(crate) local_capability_list: Option<Vec<Vec<u8>>>,
    // original -> gobgp:received-open-message
    // gobgp:received-open-message's original type is bgp-open-message.
    #[serde(rename = "received-open-message")]
    pub(crate) received_open_message: Option<Vec<u8>>,
    // original -> gobgp:admin-down
    // gobgp:admin-down's original type is boolean.
    // The state of administrative operation. If the state is true, it indicates the neighbor is disabled by the administrator.
    #[serde(rename = "admin-down")]
    pub(crate) admin_down: Option<bool>,
    // original -> gobgp:admin-state
    #[serde(rename = "admin-state")]
    pub(crate) admin_state: Option<AdminState>,
    // original -> gobgp:established-count
    // The number of how many the peer became established state.
    #[serde(rename = "established-count")]
    pub(crate) established_count: Option<u32>,
    // original -> gobgp:flops
    // The number of flip-flops.
    pub(crate) flops: Option<u32>,
    // original -> gobgp:neighbor-interface
    #[serde(rename = "neighbor-interface")]
    pub(crate) neighbor_interface: Option<String>,
    // original -> gobgp:vrf
    pub(crate) vrf: Option<String>,
    // original -> gobgp:remote-router-id
    #[serde(rename = "remote-router-id")]
    pub(crate) remote_router_id: Option<String>,
}
// struct for container bgp:config.
// Configuration parameters relating to the BGP neighbor or
// group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct NeighborConfig {
    // original -> bgp:peer-as
    // bgp:peer-as's original type is inet:as-number.
    // AS number of the peer.
    #[serde(rename = "peer-as")]
    pub(crate) peer_as: Option<u32>,
    // original -> bgp:local-as
    // bgp:local-as's original type is inet:as-number.
    // The local autonomous system number that is to be used
    // when establishing sessions with the remote peer or peer
    // group, if this differs from the global BGP router
    // autonomous system number.
    #[serde(rename = "local-as")]
    pub(crate) local_as: Option<u32>,
    // original -> bgp:peer-type
    // Explicitly designate the peer or peer group as internal
    // (iBGP) or external (eBGP).
    #[serde(rename = "peer-type")]
    pub(crate) peer_type: Option<PeerType>,
    // original -> bgp:auth-password
    // Configures an MD5 authentication password for use with
    // neighboring devices.
    #[serde(rename = "auth-password")]
    pub(crate) auth_password: Option<String>,
    // original -> bgp:remove-private-as
    // Remove private AS numbers from updates sent to peers.
    #[serde(rename = "remove-private-as")]
    pub(crate) remove_private_as: Option<RemovePrivateAsOption>,
    // original -> bgp:route-flap-damping
    // bgp:route-flap-damping's original type is boolean.
    // Enable route flap damping.
    #[serde(rename = "route-flap-damping")]
    pub(crate) route_flap_damping: Option<bool>,
    // original -> bgp:send-community
    // Specify which types of community should be sent to the
    // neighbor or group. The default is to not send the
    // community attribute.
    #[serde(rename = "send-community")]
    pub(crate) send_community: Option<CommunityType>,
    // original -> bgp:description
    // An optional textual description (intended primarily for use
    // with a peer or group.
    pub(crate) description: Option<String>,
    // original -> bgp:peer-group
    // The peer-group with which this neighbor is associated.
    #[serde(rename = "peer-group")]
    pub(crate) peer_group: Option<String>,
    // original -> bgp:neighbor-address
    // bgp:neighbor-address's original type is inet:ip-address.
    // Address of the BGP peer, either in IPv4 or IPv6.
    #[serde(rename = "neighbor-address")]
    pub(crate) neighbor_address: Option<String>,
    // original -> gobgp:admin-down
    // gobgp:admin-down's original type is boolean.
    // The config of administrative operation. If state, indicates the neighbor is disabled by the administrator.
    #[serde(rename = "admin-down")]
    pub(crate) admin_down: Option<bool>,
    // original -> gobgp:neighbor-interface
    #[serde(rename = "neighbor-interface")]
    pub(crate) neighbor_interface: Option<String>,
    // original -> gobgp:vrf
    pub(crate) vrf: Option<String>,
}
// struct for container bgp:neighbor.
// List of BGP neighbors configured on the local system,
// uniquely identified by peer IPv[46] address.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Neighbor {
    // original -> bgp:neighbor-address
    // original -> bgp:neighbor-config
    // Configuration parameters relating to the BGP neighbor or
    // group.
    pub(crate) config: Option<NeighborConfig>,
    // original -> bgp:neighbor-state
    // State information relating to the BGP neighbor or group.
    pub(crate) state: Option<NeighborState>,
    // original -> bgp:timers
    // Timers related to a BGP neighbor or group.
    pub(crate) timers: Option<Timers>,
    // original -> bgp:transport
    // Transport session parameters for the BGP neighbor or group.
    pub(crate) transport: Option<Transport>,
    // original -> bgp:error-handling
    // Error handling parameters used for the BGP neighbor or
    // group.
    #[serde(rename = "error-handling")]
    pub(crate) error_handling: Option<ErrorHandling>,
    // original -> bgp:logging-options
    // Logging options for events related to the BGP neighbor or
    // group.
    #[serde(rename = "logging-options")]
    pub(crate) logging_options: Option<LoggingOptions>,
    // original -> bgp:ebgp-multihop
    // eBGP multi-hop parameters for the BGP neighbor or group.
    #[serde(rename = "ebgp-multihop")]
    pub(crate) ebgp_multihop: Option<EbgpMultihop>,
    // original -> bgp:route-reflector
    // Route reflector parameters for the BGP neighbor or group.
    #[serde(rename = "route-reflector")]
    pub(crate) route_reflector: Option<RouteReflector>,
    // original -> bgp:as-path-options
    // AS_PATH manipulation parameters for the BGP neighbor or
    // group.
    #[serde(rename = "as-path-options")]
    pub(crate) as_path_options: Option<AsPathOptions>,
    // original -> bgp:add-paths
    // Parameters relating to the advertisement and receipt of
    // multiple paths for a single NLRI (add-paths).
    #[serde(rename = "add-paths")]
    pub(crate) add_paths: Option<AddPaths>,
    // original -> bgp:afi-safis
    // Per-address-family configuration parameters associated with
    // the neighbor or group.
    #[serde(rename = "afi-safis")]
    pub(crate) afi_safis: Option<Vec<AfiSafi>>,
    // original -> bgp:graceful-restart
    // Parameters relating the graceful restart mechanism for BGP.
    #[serde(rename = "graceful-restart")]
    pub(crate) graceful_restart: Option<GracefulRestart>,
    // original -> rpol:apply-policy
    // Anchor point for routing policies in the model.
    // Import and export policies are with respect to the local
    // routing table, i.e., export (send) and import (receive),
    // depending on the context.
    #[serde(rename = "apply-policy")]
    pub(crate) apply_policy: Option<ApplyPolicy>,
    // original -> bgp-mp:use-multiple-paths
    // Parameters related to the use of multiple-paths for the same
    // NLRI when they are received only from this neighbor.
    #[serde(rename = "use-multiple-paths")]
    pub(crate) use_multiple_paths: Option<UseMultiplePaths>,
    // original -> gobgp:route-server
    // Configure the local router as a route server.
    #[serde(rename = "route-server")]
    pub(crate) route_server: Option<RouteServer>,
    // original -> gobgp:ttl-security
    // Configure TTL Security feature.
    #[serde(rename = "ttl-security")]
    pub(crate) ttl_security: Option<TtlSecurity>,
}
// struct for container gobgp:state.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct LongLivedGracefulRestartState {
    // original -> gobgp:enabled
    // gobgp:enabled's original type is boolean.
    pub(crate) enabled: Option<bool>,
    // original -> gobgp:received
    // gobgp:received's original type is boolean.
    pub(crate) received: Option<bool>,
    // original -> gobgp:advertised
    // gobgp:advertised's original type is boolean.
    pub(crate) advertised: Option<bool>,
    // original -> gobgp:peer-restart-time
    #[serde(rename = "peer-restart-time")]
    pub(crate) peer_restart_time: Option<u32>,
    // original -> gobgp:peer-restart-timer-expired
    // gobgp:peer-restart-timer-expired's original type is boolean.
    #[serde(rename = "peer-restart-timer-expired")]
    pub(crate) peer_restart_timer_expired: Option<bool>,
}
// struct for container gobgp:config.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct LongLivedGracefulRestartConfig {
    // original -> gobgp:enabled
    // gobgp:enabled's original type is boolean.
    pub(crate) enabled: Option<bool>,
    // original -> gobgp:restart-time
    #[serde(rename = "restart-time")]
    pub(crate) restart_time: Option<u32>,
}
// struct for container gobgp:long-lived-graceful-restart.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct LongLivedGracefulRestart {
    // original -> gobgp:long-lived-graceful-restart-config
    pub(crate) config: Option<LongLivedGracefulRestartConfig>,
    // original -> gobgp:long-lived-graceful-restart-state
    pub(crate) state: Option<LongLivedGracefulRestartState>,
}
// struct for container gobgp:state.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteTargetMembershipState {
    // original -> gobgp:deferral-time
    #[serde(rename = "deferral-time")]
    pub(crate) deferral_time: Option<u16>,
}
// struct for container gobgp:config.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteTargetMembershipConfig {
    // original -> gobgp:deferral-time
    #[serde(rename = "deferral-time")]
    pub(crate) deferral_time: Option<u16>,
}
// struct for container gobgp:route-target-membership.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteTargetMembership {
    // original -> gobgp:route-target-membership-config
    pub(crate) config: Option<RouteTargetMembershipConfig>,
    // original -> gobgp:route-target-membership-state
    pub(crate) state: Option<RouteTargetMembershipState>,
}
// struct for container bgp-mp:l2vpn-evpn.
// BGP EVPN configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct L2vpnEvpn {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
}
// struct for container bgp-mp:l2vpn-vpls.
// BGP-signalled VPLS configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct L2vpnVpls {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
}
// struct for container bgp-mp:l3vpn-ipv6-multicast.
// Multicast IPv6 L3VPN configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct L3vpnIpv6Multicast {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
}
// struct for container bgp-mp:l3vpn-ipv4-multicast.
// Multicast IPv4 L3VPN configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct L3vpnIpv4Multicast {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
}
// struct for container bgp-mp:l3vpn-ipv6-unicast.
// Unicast IPv6 L3VPN configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct L3vpnIpv6Unicast {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
}
// struct for container bgp-mp:l3vpn-ipv4-unicast.
// Unicast IPv4 L3VPN configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct L3vpnIpv4Unicast {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
}
// struct for container bgp-mp:ipv6-labelled-unicast.
// IPv6 Labelled Unicast configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ipv6LabelledUnicast {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
}
// struct for container bgp-mp:ipv4-labelled-unicast.
// IPv4 Labelled Unicast configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ipv4LabelledUnicast {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
}
// struct for container bgp-mp:state.
// State information for common IPv4 and IPv6 unicast
// parameters.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ipv6UnicastState {
    // original -> bgp-mp:send-default-route
    // bgp-mp:send-default-route's original type is boolean.
    // If set to true, send the default-route to the neighbour(s).
    #[serde(rename = "send-default-route")]
    pub(crate) send_default_route: Option<bool>,
}
// struct for container bgp-mp:config.
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ipv6UnicastConfig {
    // original -> bgp-mp:send-default-route
    // bgp-mp:send-default-route's original type is boolean.
    // If set to true, send the default-route to the neighbour(s).
    #[serde(rename = "send-default-route")]
    pub(crate) send_default_route: Option<bool>,
}
// struct for container bgp-mp:ipv6-unicast.
// IPv6 unicast configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ipv6Unicast {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
    // original -> bgp-mp:ipv6-unicast-config
    // Configuration parameters for common IPv4 and IPv6 unicast
    // AFI-SAFI options.
    pub(crate) config: Option<Ipv6UnicastConfig>,
    // original -> bgp-mp:ipv6-unicast-state
    // State information for common IPv4 and IPv6 unicast
    // parameters.
    pub(crate) state: Option<Ipv6UnicastState>,
}
// struct for container bgp-mp:state.
// State information for common IPv4 and IPv6 unicast
// parameters.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ipv4UnicastState {
    // original -> bgp-mp:send-default-route
    // bgp-mp:send-default-route's original type is boolean.
    // If set to true, send the default-route to the neighbour(s).
    #[serde(rename = "send-default-route")]
    pub(crate) send_default_route: Option<bool>,
}
// struct for container bgp-mp:config.
// Configuration parameters for common IPv4 and IPv6 unicast
// AFI-SAFI options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ipv4UnicastConfig {
    // original -> bgp-mp:send-default-route
    // bgp-mp:send-default-route's original type is boolean.
    // If set to true, send the default-route to the neighbour(s).
    #[serde(rename = "send-default-route")]
    pub(crate) send_default_route: Option<bool>,
}
// struct for container bgp-mp:state.
// State information relating to the prefix-limit for the
// AFI-SAFI.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct PrefixLimitState {
    // original -> bgp-mp:max-prefixes
    // Maximum number of prefixes that will be accepted
    // from the neighbour.
    #[serde(rename = "max-prefixes")]
    pub(crate) max_prefixes: Option<u32>,
    // original -> bgp-mp:shutdown-threshold-pct
    // Threshold on number of prefixes that can be received
    // from a neighbour before generation of warning messages
    // or log entries. Expressed as a percentage of
    // max-prefixes.
    #[serde(rename = "shutdown-threshold-pct")]
    pub(crate) shutdown_threshold_pct: Option<Percentage>,
    // original -> bgp-mp:restart-timer
    // bgp-mp:restart-timer's original type is decimal64.
    // Time interval in seconds after which the BGP session
    // is re-established after being torn down due to exceeding
    // the max-prefix limit.
    #[serde(rename = "restart-timer")]
    pub(crate) restart_timer: Option<f64>,
}
// struct for container bgp-mp:config.
// Configuration parameters relating to the prefix
// limit for the AFI-SAFI.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct PrefixLimitConfig {
    // original -> bgp-mp:max-prefixes
    // Maximum number of prefixes that will be accepted
    // from the neighbour.
    #[serde(rename = "max-prefixes")]
    pub(crate) max_prefixes: Option<u32>,
    // original -> bgp-mp:shutdown-threshold-pct
    // Threshold on number of prefixes that can be received
    // from a neighbour before generation of warning messages
    // or log entries. Expressed as a percentage of
    // max-prefixes.
    #[serde(rename = "shutdown-threshold-pct")]
    pub(crate) shutdown_threshold_pct: Option<Percentage>,
    // original -> bgp-mp:restart-timer
    // bgp-mp:restart-timer's original type is decimal64.
    // Time interval in seconds after which the BGP session
    // is re-established after being torn down due to exceeding
    // the max-prefix limit.
    #[serde(rename = "restart-timer")]
    pub(crate) restart_timer: Option<f64>,
}
// struct for container bgp-mp:prefix-limit.
// Configure the maximum number of prefixes that will be
// accepted from a peer.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct PrefixLimit {
    // original -> bgp-mp:prefix-limit-config
    // Configuration parameters relating to the prefix
    // limit for the AFI-SAFI.
    pub(crate) config: Option<PrefixLimitConfig>,
    // original -> bgp-mp:prefix-limit-state
    // State information relating to the prefix-limit for the
    // AFI-SAFI.
    pub(crate) state: Option<PrefixLimitState>,
}
// struct for container bgp-mp:ipv4-unicast.
// IPv4 unicast configuration options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ipv4Unicast {
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
    // original -> bgp-mp:ipv4-unicast-config
    // Configuration parameters for common IPv4 and IPv6 unicast
    // AFI-SAFI options.
    pub(crate) config: Option<Ipv4UnicastConfig>,
    // original -> bgp-mp:ipv4-unicast-state
    // State information for common IPv4 and IPv6 unicast
    // parameters.
    pub(crate) state: Option<Ipv4UnicastState>,
}
// struct for container rpol:state.
// Operational state for routing policy.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ApplyPolicyState {
    // original -> rpol:import-policy
    // list of policy names in sequence to be applied on
    // receiving a routing update in the current context, e.g.,
    // for the current peer group, neighbor, address family,
    // etc.
    #[serde(rename = "import-policy-list")]
    pub(crate) import_policy_list: Option<Vec<String>>,
    // original -> rpol:default-import-policy
    // explicitly set a default policy if no policy definition
    // in the import policy chain is satisfied.
    #[serde(rename = "default-import-policy")]
    pub(crate) default_import_policy: Option<DefaultPolicyType>,
    // original -> rpol:export-policy
    // list of policy names in sequence to be applied on
    // sending a routing update in the current context, e.g.,
    // for the current peer group, neighbor, address family,
    // etc.
    #[serde(rename = "export-policy-list")]
    pub(crate) export_policy_list: Option<Vec<String>>,
    // original -> rpol:default-export-policy
    // explicitly set a default policy if no policy definition
    // in the export policy chain is satisfied.
    #[serde(rename = "default-export-policy")]
    pub(crate) default_export_policy: Option<DefaultPolicyType>,
    // original -> gobgp:in-policy
    // list of policy names in sequence to be applied on
    // sending a routing update in the current context, e.g.,
    // for the current other route server clients.
    #[serde(rename = "in-policy-list")]
    pub(crate) in_policy_list: Option<Vec<String>>,
    // original -> gobgp:default-in-policy
    // explicitly set a default policy if no policy definition
    // in the in-policy chain is satisfied.
    #[serde(rename = "default-in-policy")]
    pub(crate) default_in_policy: Option<DefaultPolicyType>,
}
// struct for container rpol:config.
// Policy configuration data.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ApplyPolicyConfig {
    // original -> rpol:import-policy
    // list of policy names in sequence to be applied on
    // receiving a routing update in the current context, e.g.,
    // for the current peer group, neighbor, address family,
    // etc.
    #[serde(rename = "import-policy-list")]
    pub(crate) import_policy_list: Option<Vec<String>>,
    // original -> rpol:default-import-policy
    // explicitly set a default policy if no policy definition
    // in the import policy chain is satisfied.
    #[serde(rename = "default-import-policy")]
    pub(crate) default_import_policy: Option<DefaultPolicyType>,
    // original -> rpol:export-policy
    // list of policy names in sequence to be applied on
    // sending a routing update in the current context, e.g.,
    // for the current peer group, neighbor, address family,
    // etc.
    #[serde(rename = "export-policy-list")]
    pub(crate) export_policy_list: Option<Vec<String>>,
    // original -> rpol:default-export-policy
    // explicitly set a default policy if no policy definition
    // in the export policy chain is satisfied.
    #[serde(rename = "default-export-policy")]
    pub(crate) default_export_policy: Option<DefaultPolicyType>,
    // original -> gobgp:in-policy
    // list of policy names in sequence to be applied on
    // sending a routing update in the current context, e.g.,
    // for the current other route server clients.
    #[serde(rename = "in-policy-list")]
    pub(crate) in_policy_list: Option<Vec<String>>,
    // original -> gobgp:default-in-policy
    // explicitly set a default policy if no policy definition
    // in the in-policy chain is satisfied.
    #[serde(rename = "default-in-policy")]
    pub(crate) default_in_policy: Option<DefaultPolicyType>,
}
// struct for container rpol:apply-policy.
// Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ApplyPolicy {
    // original -> rpol:apply-policy-config
    // Policy configuration data.
    pub(crate) config: Option<ApplyPolicyConfig>,
    // original -> rpol:apply-policy-state
    // Operational state for routing policy.
    pub(crate) state: Option<ApplyPolicyState>,
}
// struct for container bgp-mp:state.
// State information relating to the AFI-SAFI.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AfiSafiState {
    // original -> bgp-mp:afi-safi-name
    // AFI,SAFI.
    #[serde(rename = "afi-safi-name")]
    pub(crate) afi_safi_name: Option<AfiSafiType>,
    // original -> bgp-mp:enabled
    // bgp-mp:enabled's original type is boolean.
    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is
    // enabled for the neighbour or group.
    pub(crate) enabled: Option<bool>,
    // original -> bgp-op:total-paths
    // Total number of BGP paths within the context.
    #[serde(rename = "total-paths")]
    pub(crate) total_paths: Option<u32>,
    // original -> bgp-op:total-prefixes
    // .
    #[serde(rename = "total-prefixes")]
    pub(crate) total_prefixes: Option<u32>,
    // original -> gobgp:family
    // gobgp:family's original type is route-family.
    // Address family value of AFI-SAFI pair translated from afi-safi-name.
    pub(crate) family: Option<u32>,
}
// struct for container bgp-mp:config.
// Configuration parameters for the AFI-SAFI.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AfiSafiConfig {
    // original -> bgp-mp:afi-safi-name
    // AFI,SAFI.
    #[serde(rename = "afi-safi-name")]
    pub(crate) afi_safi_name: Option<AfiSafiType>,
    // original -> bgp-mp:enabled
    // bgp-mp:enabled's original type is boolean.
    // This leaf indicates whether the IPv4 Unicast AFI,SAFI is
    // enabled for the neighbour or group.
    pub(crate) enabled: Option<bool>,
}
// struct for container bgp-mp:state.
// State information for BGP graceful-restart.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MpGracefulRestartState {
    // original -> bgp-mp:enabled
    // bgp-mp:enabled's original type is boolean.
    // This leaf indicates whether graceful-restart is enabled for
    // this AFI-SAFI.
    pub(crate) enabled: Option<bool>,
    // original -> bgp-op:received
    // bgp-op:received's original type is boolean.
    // This leaf indicates whether the neighbor advertised the
    // ability to support graceful-restart for this AFI-SAFI.
    pub(crate) received: Option<bool>,
    // original -> bgp-op:advertised
    // bgp-op:advertised's original type is boolean.
    // This leaf indicates whether the ability to support
    // graceful-restart has been advertised to the peer.
    pub(crate) advertised: Option<bool>,
    // original -> gobgp:end-of-rib-received
    // gobgp:end-of-rib-received's original type is boolean.
    #[serde(rename = "end-of-rib-received")]
    pub(crate) end_of_rib_received: Option<bool>,
    // original -> gobgp:end-of-rib-sent
    // gobgp:end-of-rib-sent's original type is boolean.
    #[serde(rename = "end-of-rib-sent")]
    pub(crate) end_of_rib_sent: Option<bool>,
}
// struct for container bgp-mp:config.
// Configuration options for BGP graceful-restart.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MpGracefulRestartConfig {
    // original -> bgp-mp:enabled
    // bgp-mp:enabled's original type is boolean.
    // This leaf indicates whether graceful-restart is enabled for
    // this AFI-SAFI.
    pub(crate) enabled: Option<bool>,
}
// struct for container bgp-mp:graceful-restart.
// Parameters relating to BGP graceful-restart.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MpGracefulRestart {
    // original -> bgp-mp:mp-graceful-restart-config
    // Configuration options for BGP graceful-restart.
    pub(crate) config: Option<MpGracefulRestartConfig>,
    // original -> bgp-mp:mp-graceful-restart-state
    // State information for BGP graceful-restart.
    pub(crate) state: Option<MpGracefulRestartState>,
}
// struct for container bgp-mp:afi-safi.
// AFI,SAFI configuration available for the
// neighbour or group.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AfiSafi {
    // original -> bgp-mp:afi-safi-name
    // original -> bgp-mp:mp-graceful-restart
    // Parameters relating to BGP graceful-restart.
    #[serde(rename = "mp-graceful-restart")]
    pub(crate) mp_graceful_restart: Option<MpGracefulRestart>,
    // original -> bgp-mp:afi-safi-config
    // Configuration parameters for the AFI-SAFI.
    pub(crate) config: Option<AfiSafiConfig>,
    // original -> bgp-mp:afi-safi-state
    // State information relating to the AFI-SAFI.
    pub(crate) state: Option<AfiSafiState>,
    // original -> rpol:apply-policy
    // Anchor point for routing policies in the model.
    // Import and export policies are with respect to the local
    // routing table, i.e., export (send) and import (receive),
    // depending on the context.
    #[serde(rename = "apply-policy")]
    pub(crate) apply_policy: Option<ApplyPolicy>,
    // original -> bgp-mp:ipv4-unicast
    // IPv4 unicast configuration options.
    #[serde(rename = "ipv4-unicast")]
    pub(crate) ipv4_unicast: Option<Ipv4Unicast>,
    // original -> bgp-mp:ipv6-unicast
    // IPv6 unicast configuration options.
    #[serde(rename = "ipv6-unicast")]
    pub(crate) ipv6_unicast: Option<Ipv6Unicast>,
    // original -> bgp-mp:ipv4-labelled-unicast
    // IPv4 Labelled Unicast configuration options.
    #[serde(rename = "ipv4-labelled-unicast")]
    pub(crate) ipv4_labelled_unicast: Option<Ipv4LabelledUnicast>,
    // original -> bgp-mp:ipv6-labelled-unicast
    // IPv6 Labelled Unicast configuration options.
    #[serde(rename = "ipv6-labelled-unicast")]
    pub(crate) ipv6_labelled_unicast: Option<Ipv6LabelledUnicast>,
    // original -> bgp-mp:l3vpn-ipv4-unicast
    // Unicast IPv4 L3VPN configuration options.
    #[serde(rename = "l3vpn-ipv4-unicast")]
    pub(crate) l3vpn_ipv4_unicast: Option<L3vpnIpv4Unicast>,
    // original -> bgp-mp:l3vpn-ipv6-unicast
    // Unicast IPv6 L3VPN configuration options.
    #[serde(rename = "l3vpn-ipv6-unicast")]
    pub(crate) l3vpn_ipv6_unicast: Option<L3vpnIpv6Unicast>,
    // original -> bgp-mp:l3vpn-ipv4-multicast
    // Multicast IPv4 L3VPN configuration options.
    #[serde(rename = "l3vpn-ipv4-multicast")]
    pub(crate) l3vpn_ipv4_multicast: Option<L3vpnIpv4Multicast>,
    // original -> bgp-mp:l3vpn-ipv6-multicast
    // Multicast IPv6 L3VPN configuration options.
    #[serde(rename = "l3vpn-ipv6-multicast")]
    pub(crate) l3vpn_ipv6_multicast: Option<L3vpnIpv6Multicast>,
    // original -> bgp-mp:l2vpn-vpls
    // BGP-signalled VPLS configuration options.
    #[serde(rename = "l2vpn-vpls")]
    pub(crate) l2vpn_vpls: Option<L2vpnVpls>,
    // original -> bgp-mp:l2vpn-evpn
    // BGP EVPN configuration options.
    #[serde(rename = "l2vpn-evpn")]
    pub(crate) l2vpn_evpn: Option<L2vpnEvpn>,
    // original -> bgp-mp:route-selection-options
    // Parameters relating to options for route selection.
    #[serde(rename = "route-selection-options")]
    pub(crate) route_selection_options: Option<RouteSelectionOptions>,
    // original -> bgp-mp:use-multiple-paths
    // Parameters related to the use of multiple paths for the
    // same NLRI.
    #[serde(rename = "use-multiple-paths")]
    pub(crate) use_multiple_paths: Option<UseMultiplePaths>,
    // original -> bgp-mp:prefix-limit
    // Configure the maximum number of prefixes that will be
    // accepted from a peer.
    #[serde(rename = "prefix-limit")]
    pub(crate) prefix_limit: Option<PrefixLimit>,
    // original -> gobgp:route-target-membership
    #[serde(rename = "route-target-membership")]
    pub(crate) route_target_membership: Option<RouteTargetMembership>,
    // original -> gobgp:long-lived-graceful-restart
    #[serde(rename = "long-lived-graceful-restart")]
    pub(crate) long_lived_graceful_restart: Option<LongLivedGracefulRestart>,
    // original -> gobgp:add-paths
    // add-paths configuration options related to a particular AFI-SAFI.
    #[serde(rename = "add-paths")]
    pub(crate) add_paths: Option<AddPaths>,
}
// struct for container bgp:state.
// State information associated with graceful-restart.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct GracefulRestartState {
    // original -> bgp:enabled
    // bgp:enabled's original type is boolean.
    // Enable or disable the graceful-restart capability.
    pub(crate) enabled: Option<bool>,
    // original -> bgp:restart-time
    // Estimated time (in seconds) for the local BGP speaker to
    // restart a session. This value is advertise in the graceful
    // restart BGP capability.  This is a 12-bit value, referred to
    // as Restart Time in RFC4724.  Per RFC4724, the suggested
    // default value is <= the hold-time value.
    #[serde(rename = "restart-time")]
    pub(crate) restart_time: Option<u16>,
    // original -> bgp:stale-routes-time
    // bgp:stale-routes-time's original type is decimal64.
    // An upper-bound on the time thate stale routes will be
    // retained by a router after a session is restarted. If an
    // End-of-RIB (EOR) marker is received prior to this timer
    // expiring stale-routes will be flushed upon its receipt - if
    // no EOR is received, then when this timer expires stale paths
    // will be purged. This timer is referred to as the
    // Selection_Deferral_Timer in RFC4724.
    #[serde(rename = "stale-routes-time")]
    pub(crate) stale_routes_time: Option<f64>,
    // original -> bgp:helper-only
    // bgp:helper-only's original type is boolean.
    // Enable graceful-restart in helper mode only. When this
    // leaf is set, the local system does not retain forwarding
    // its own state during a restart, but supports procedures
    // for the receiving speaker, as defined in RFC4724.
    #[serde(rename = "helper-only")]
    pub(crate) helper_only: Option<bool>,
    // original -> bgp-op:peer-restart-time
    // The period of time (advertised by the peer) that
    // the peer expects a restart of a BGP session to
    // take.
    #[serde(rename = "peer-restart-time")]
    pub(crate) peer_restart_time: Option<u16>,
    // original -> bgp-op:peer-restarting
    // bgp-op:peer-restarting's original type is boolean.
    // This flag indicates whether the remote neighbor is currently
    // in the process of restarting, and hence received routes are
    // currently stale.
    #[serde(rename = "peer-restarting")]
    pub(crate) peer_restarting: Option<bool>,
    // original -> bgp-op:local-restarting
    // bgp-op:local-restarting's original type is boolean.
    // This flag indicates whether the local neighbor is currently
    // restarting. The flag is unset after all NLRI have been
    // advertised to the peer, and the End-of-RIB (EOR) marker has
    // been unset.
    #[serde(rename = "local-restarting")]
    pub(crate) local_restarting: Option<bool>,
    // original -> bgp-op:mode
    // This leaf indicates the mode of operation of BGP graceful
    // restart with the peer.
    pub(crate) mode: Option<Mode>,
    // original -> gobgp:deferral-time
    #[serde(rename = "deferral-time")]
    pub(crate) deferral_time: Option<u16>,
    // original -> gobgp:notification-enabled
    // gobgp:notification-enabled's original type is boolean.
    #[serde(rename = "notification-enabled")]
    pub(crate) notification_enabled: Option<bool>,
    // original -> gobgp:long-lived-enabled
    // gobgp:long-lived-enabled's original type is boolean.
    #[serde(rename = "long-lived-enabled")]
    pub(crate) long_lived_enabled: Option<bool>,
}
// struct for container bgp:config.
// Configuration parameters relating to graceful-restart.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct GracefulRestartConfig {
    // original -> bgp:enabled
    // bgp:enabled's original type is boolean.
    // Enable or disable the graceful-restart capability.
    pub(crate) enabled: Option<bool>,
    // original -> bgp:restart-time
    // Estimated time (in seconds) for the local BGP speaker to
    // restart a session. This value is advertise in the graceful
    // restart BGP capability.  This is a 12-bit value, referred to
    // as Restart Time in RFC4724.  Per RFC4724, the suggested
    // default value is <= the hold-time value.
    #[serde(rename = "restart-time")]
    pub(crate) restart_time: Option<u16>,
    // original -> bgp:stale-routes-time
    // bgp:stale-routes-time's original type is decimal64.
    // An upper-bound on the time thate stale routes will be
    // retained by a router after a session is restarted. If an
    // End-of-RIB (EOR) marker is received prior to this timer
    // expiring stale-routes will be flushed upon its receipt - if
    // no EOR is received, then when this timer expires stale paths
    // will be purged. This timer is referred to as the
    // Selection_Deferral_Timer in RFC4724.
    #[serde(rename = "stale-routes-time")]
    pub(crate) stale_routes_time: Option<f64>,
    // original -> bgp:helper-only
    // bgp:helper-only's original type is boolean.
    // Enable graceful-restart in helper mode only. When this
    // leaf is set, the local system does not retain forwarding
    // its own state during a restart, but supports procedures
    // for the receiving speaker, as defined in RFC4724.
    #[serde(rename = "helper-only")]
    pub(crate) helper_only: Option<bool>,
    // original -> gobgp:deferral-time
    #[serde(rename = "deferral-time")]
    pub(crate) deferral_time: Option<u16>,
    // original -> gobgp:notification-enabled
    // gobgp:notification-enabled's original type is boolean.
    #[serde(rename = "notification-enabled")]
    pub(crate) notification_enabled: Option<bool>,
    // original -> gobgp:long-lived-enabled
    // gobgp:long-lived-enabled's original type is boolean.
    #[serde(rename = "long-lived-enabled")]
    pub(crate) long_lived_enabled: Option<bool>,
}
// struct for container bgp:graceful-restart.
// Parameters relating the graceful restart mechanism for BGP.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct GracefulRestart {
    // original -> bgp:graceful-restart-config
    // Configuration parameters relating to graceful-restart.
    pub(crate) config: Option<GracefulRestartConfig>,
    // original -> bgp:graceful-restart-state
    // State information associated with graceful-restart.
    pub(crate) state: Option<GracefulRestartState>,
}
// struct for container bgp-mp:state.
// State information relating to iBGP multipath.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct IbgpState {
    // original -> bgp-mp:maximum-paths
    // Maximum number of parallel paths to consider when using
    // iBGP multipath. The default is to use a single path.
    #[serde(rename = "maximum-paths")]
    pub(crate) maximum_paths: Option<u32>,
}
// struct for container bgp-mp:config.
// Configuration parameters relating to iBGP multipath.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct IbgpConfig {
    // original -> bgp-mp:maximum-paths
    // Maximum number of parallel paths to consider when using
    // iBGP multipath. The default is to use a single path.
    #[serde(rename = "maximum-paths")]
    pub(crate) maximum_paths: Option<u32>,
}
// struct for container bgp-mp:ibgp.
// Multipath parameters for iBGP.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ibgp {
    // original -> bgp-mp:ibgp-config
    // Configuration parameters relating to iBGP multipath.
    pub(crate) config: Option<IbgpConfig>,
    // original -> bgp-mp:ibgp-state
    // State information relating to iBGP multipath.
    pub(crate) state: Option<IbgpState>,
}
// struct for container bgp-mp:state.
// State information relating to eBGP multipath.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct EbgpState {
    // original -> bgp-mp:allow-multiple-as
    // bgp-mp:allow-multiple-as's original type is boolean.
    // Allow multipath to use paths from different neighbouring
    // ASes.  The default is to only consider multiple paths from
    // the same neighbouring AS.
    #[serde(rename = "allow-multiple-as")]
    pub(crate) allow_multiple_as: Option<bool>,
    // original -> bgp-mp:maximum-paths
    // Maximum number of parallel paths to consider when using
    // BGP multipath. The default is use a single path.
    #[serde(rename = "maximum-paths")]
    pub(crate) maximum_paths: Option<u32>,
}
// struct for container bgp-mp:config.
// Configuration parameters relating to eBGP multipath.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct EbgpConfig {
    // original -> bgp-mp:allow-multiple-as
    // bgp-mp:allow-multiple-as's original type is boolean.
    // Allow multipath to use paths from different neighbouring
    // ASes.  The default is to only consider multiple paths from
    // the same neighbouring AS.
    #[serde(rename = "allow-multiple-as")]
    pub(crate) allow_multiple_as: Option<bool>,
    // original -> bgp-mp:maximum-paths
    // Maximum number of parallel paths to consider when using
    // BGP multipath. The default is use a single path.
    #[serde(rename = "maximum-paths")]
    pub(crate) maximum_paths: Option<u32>,
}
// struct for container bgp-mp:ebgp.
// Multipath parameters for eBGP.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Ebgp {
    // original -> bgp-mp:ebgp-config
    // Configuration parameters relating to eBGP multipath.
    pub(crate) config: Option<EbgpConfig>,
    // original -> bgp-mp:ebgp-state
    // State information relating to eBGP multipath.
    pub(crate) state: Option<EbgpState>,
}
// struct for container bgp-mp:state.
// State parameters relating to multipath.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct UseMultiplePathsState {
    // original -> bgp-mp:enabled
    // bgp-mp:enabled's original type is boolean.
    // Whether the use of multiple paths for the same NLRI is
    // enabled for the neighbor. This value is overridden by
    // any more specific configuration value.
    pub(crate) enabled: Option<bool>,
}
// struct for container bgp-mp:config.
// Configuration parameters relating to multipath.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct UseMultiplePathsConfig {
    // original -> bgp-mp:enabled
    // bgp-mp:enabled's original type is boolean.
    // Whether the use of multiple paths for the same NLRI is
    // enabled for the neighbor. This value is overridden by
    // any more specific configuration value.
    pub(crate) enabled: Option<bool>,
}
// struct for container bgp-mp:use-multiple-paths.
// Parameters related to the use of multiple paths for the
// same NLRI.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct UseMultiplePaths {
    // original -> bgp-mp:use-multiple-paths-config
    // Configuration parameters relating to multipath.
    pub(crate) config: Option<UseMultiplePathsConfig>,
    // original -> bgp-mp:use-multiple-paths-state
    // State parameters relating to multipath.
    pub(crate) state: Option<UseMultiplePathsState>,
    // original -> bgp-mp:ebgp
    // Multipath parameters for eBGP.
    pub(crate) ebgp: Option<Ebgp>,
    // original -> bgp-mp:ibgp
    // Multipath parameters for iBGP.
    pub(crate) ibgp: Option<Ibgp>,
}
// struct for container bgp:state.
// State information relating to the BGP confederations.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ConfederationState {
    // original -> bgp:enabled
    // bgp:enabled's original type is boolean.
    // When this leaf is set to true it indicates that
    // the local-AS is part of a BGP confederation.
    pub(crate) enabled: Option<bool>,
    // original -> bgp:identifier
    // bgp:identifier's original type is inet:as-number.
    // Confederation identifier for the autonomous system.
    pub(crate) identifier: Option<u32>,
    // original -> bgp:member-as
    // original type is list of inet:as-number
    // Remote autonomous systems that are to be treated
    // as part of the local confederation.
    #[serde(rename = "member-as-list")]
    pub(crate) member_as_list: Option<Vec<u32>>,
}
// struct for container bgp:config.
// Configuration parameters relating to BGP confederations.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ConfederationConfig {
    // original -> bgp:enabled
    // bgp:enabled's original type is boolean.
    // When this leaf is set to true it indicates that
    // the local-AS is part of a BGP confederation.
    pub(crate) enabled: Option<bool>,
    // original -> bgp:identifier
    // bgp:identifier's original type is inet:as-number.
    // Confederation identifier for the autonomous system.
    pub(crate) identifier: Option<u32>,
    // original -> bgp:member-as
    // original type is list of inet:as-number
    // Remote autonomous systems that are to be treated
    // as part of the local confederation.
    #[serde(rename = "member-as-list")]
    pub(crate) member_as_list: Option<Vec<u32>>,
}
// struct for container bgp:confederation.
// Parameters indicating whether the local system acts as part
// of a BGP confederation.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Confederation {
    // original -> bgp:confederation-config
    // Configuration parameters relating to BGP confederations.
    pub(crate) config: Option<ConfederationConfig>,
    // original -> bgp:confederation-state
    // State information relating to the BGP confederations.
    pub(crate) state: Option<ConfederationState>,
}
// struct for container bgp:state.
// State information relating to the default route distance.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct DefaultRouteDistanceState {
    // original -> bgp:external-route-distance
    // Administrative distance for routes learned from external
    // BGP (eBGP).
    #[serde(rename = "external-route-distance")]
    pub(crate) external_route_distance: Option<u8>,
    // original -> bgp:internal-route-distance
    // Administrative distance for routes learned from internal
    // BGP (iBGP).
    #[serde(rename = "internal-route-distance")]
    pub(crate) internal_route_distance: Option<u8>,
}
// struct for container bgp:config.
// Configuration parameters relating to the default route
// distance.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct DefaultRouteDistanceConfig {
    // original -> bgp:external-route-distance
    // Administrative distance for routes learned from external
    // BGP (eBGP).
    #[serde(rename = "external-route-distance")]
    pub(crate) external_route_distance: Option<u8>,
    // original -> bgp:internal-route-distance
    // Administrative distance for routes learned from internal
    // BGP (iBGP).
    #[serde(rename = "internal-route-distance")]
    pub(crate) internal_route_distance: Option<u8>,
}
// struct for container bgp:default-route-distance.
// Administrative distance (or preference) assigned to
// routes received from different sources
// (external, internal, and local).
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct DefaultRouteDistance {
    // original -> bgp:default-route-distance-config
    // Configuration parameters relating to the default route
    // distance.
    pub(crate) config: Option<DefaultRouteDistanceConfig>,
    // original -> bgp:default-route-distance-state
    // State information relating to the default route distance.
    pub(crate) state: Option<DefaultRouteDistanceState>,
}
// struct for container bgp-mp:state.
// State information for the route selection options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteSelectionOptionsState {
    // original -> bgp-mp:always-compare-med
    // bgp-mp:always-compare-med's original type is boolean.
    // Compare multi-exit discriminator (MED) value from
    // different ASes when selecting the best route.  The
    // default behavior is to only compare MEDs for paths
    // received from the same AS.
    #[serde(rename = "always-compare-med")]
    pub(crate) always_compare_med: Option<bool>,
    // original -> bgp-mp:ignore-as-path-length
    // bgp-mp:ignore-as-path-length's original type is boolean.
    // Ignore the AS path length when selecting the best path.
    // The default is to use the AS path length and prefer paths
    // with shorter length.
    #[serde(rename = "ignore-as-path-length")]
    pub(crate) ignore_as_path_length: Option<bool>,
    // original -> bgp-mp:external-compare-router-id
    // bgp-mp:external-compare-router-id's original type is boolean.
    // When comparing similar routes received from external
    // BGP peers, use the router-id as a criterion to select
    // the active path.
    #[serde(rename = "external-compare-router-id")]
    pub(crate) external_compare_router_id: Option<bool>,
    // original -> bgp-mp:advertise-inactive-routes
    // bgp-mp:advertise-inactive-routes's original type is boolean.
    // Advertise inactive routes to external peers.  The
    // default is to only advertise active routes.
    #[serde(rename = "advertise-inactive-routes")]
    pub(crate) advertise_inactive_routes: Option<bool>,
    // original -> bgp-mp:enable-aigp
    // bgp-mp:enable-aigp's original type is boolean.
    // Flag to enable sending / receiving accumulated IGP
    // attribute in routing updates.
    #[serde(rename = "enable-aigp")]
    pub(crate) enable_aigp: Option<bool>,
    // original -> bgp-mp:ignore-next-hop-igp-metric
    // bgp-mp:ignore-next-hop-igp-metric's original type is boolean.
    // Ignore the IGP metric to the next-hop when calculating
    // BGP best-path. The default is to select the route for
    // which the metric to the next-hop is lowest.
    #[serde(rename = "ignore-next-hop-igp-metric")]
    pub(crate) ignore_next_hop_igp_metric: Option<bool>,
    // original -> gobgp:disable-best-path-selection
    // gobgp:disable-best-path-selection's original type is boolean.
    // Disables best path selection process.
    #[serde(rename = "disable-best-path-selection")]
    pub(crate) disable_best_path_selection: Option<bool>,
}
// struct for container bgp-mp:config.
// Configuration parameters relating to route selection
// options.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteSelectionOptionsConfig {
    // original -> bgp-mp:always-compare-med
    // bgp-mp:always-compare-med's original type is boolean.
    // Compare multi-exit discriminator (MED) value from
    // different ASes when selecting the best route.  The
    // default behavior is to only compare MEDs for paths
    // received from the same AS.
    #[serde(rename = "always-compare-med")]
    pub(crate) always_compare_med: Option<bool>,
    // original -> bgp-mp:ignore-as-path-length
    // bgp-mp:ignore-as-path-length's original type is boolean.
    // Ignore the AS path length when selecting the best path.
    // The default is to use the AS path length and prefer paths
    // with shorter length.
    #[serde(rename = "ignore-as-path-length")]
    pub(crate) ignore_as_path_length: Option<bool>,
    // original -> bgp-mp:external-compare-router-id
    // bgp-mp:external-compare-router-id's original type is boolean.
    // When comparing similar routes received from external
    // BGP peers, use the router-id as a criterion to select
    // the active path.
    #[serde(rename = "external-compare-router-id")]
    pub(crate) external_compare_router_id: Option<bool>,
    // original -> bgp-mp:advertise-inactive-routes
    // bgp-mp:advertise-inactive-routes's original type is boolean.
    // Advertise inactive routes to external peers.  The
    // default is to only advertise active routes.
    #[serde(rename = "advertise-inactive-routes")]
    pub(crate) advertise_inactive_routes: Option<bool>,
    // original -> bgp-mp:enable-aigp
    // bgp-mp:enable-aigp's original type is boolean.
    // Flag to enable sending / receiving accumulated IGP
    // attribute in routing updates.
    #[serde(rename = "enable-aigp")]
    pub(crate) enable_aigp: Option<bool>,
    // original -> bgp-mp:ignore-next-hop-igp-metric
    // bgp-mp:ignore-next-hop-igp-metric's original type is boolean.
    // Ignore the IGP metric to the next-hop when calculating
    // BGP best-path. The default is to select the route for
    // which the metric to the next-hop is lowest.
    #[serde(rename = "ignore-next-hop-igp-metric")]
    pub(crate) ignore_next_hop_igp_metric: Option<bool>,
    // original -> gobgp:disable-best-path-selection
    // gobgp:disable-best-path-selection's original type is boolean.
    // Disables best path selection process.
    #[serde(rename = "disable-best-path-selection")]
    pub(crate) disable_best_path_selection: Option<bool>,
}
// struct for container bgp-mp:route-selection-options.
// Parameters relating to options for route selection.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RouteSelectionOptions {
    // original -> bgp-mp:route-selection-options-config
    // Configuration parameters relating to route selection
    // options.
    pub(crate) config: Option<RouteSelectionOptionsConfig>,
    // original -> bgp-mp:route-selection-options-state
    // State information for the route selection options.
    pub(crate) state: Option<RouteSelectionOptionsState>,
}
// struct for container bgp:state.
// State information relating to the global BGP router.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct GlobalState {
    // original -> bgp:as
    // bgp:as's original type is inet:as-number.
    // Local autonomous system number of the router.  Uses
    // the 32-bit as-number type from the model in RFC 6991.
    pub(crate) r#as: Option<u32>,
    // original -> bgp:router-id
    // bgp:router-id's original type is inet:ipv4-address.
    // Router id of the router, expressed as an
    // 32-bit value, IPv4 address.
    #[serde(rename = "router-id")]
    pub(crate) router_id: Option<String>,
    // original -> bgp-op:total-paths
    // Total number of BGP paths within the context.
    #[serde(rename = "total-paths")]
    pub(crate) total_paths: Option<u32>,
    // original -> bgp-op:total-prefixes
    // .
    #[serde(rename = "total-prefixes")]
    pub(crate) total_prefixes: Option<u32>,
    // original -> gobgp:port
    pub(crate) port: Option<i32>,
    // original -> gobgp:local-address
    #[serde(rename = "local-address-list")]
    pub(crate) local_address_list: Option<Vec<String>>,
}
// struct for container bgp:config.
// Configuration parameters relating to the global BGP router.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct GlobalConfig {
    // original -> bgp:as
    // bgp:as's original type is inet:as-number.
    // Local autonomous system number of the router.  Uses
    // the 32-bit as-number type from the model in RFC 6991.
    pub(crate) r#as: Option<u32>,
    // original -> bgp:router-id
    // bgp:router-id's original type is inet:ipv4-address.
    // Router id of the router, expressed as an
    // 32-bit value, IPv4 address.
    #[serde(rename = "router-id")]
    pub(crate) router_id: Option<String>,
    // original -> gobgp:port
    pub(crate) port: Option<i32>,
    // original -> gobgp:local-address
    #[serde(rename = "local-address-list")]
    pub(crate) local_address_list: Option<Vec<String>>,
}
// struct for container bgp:global.
// Global configuration for the BGP router.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Global {
    // original -> bgp:global-config
    // Configuration parameters relating to the global BGP router.
    pub(crate) config: Option<GlobalConfig>,
    // original -> bgp:global-state
    // State information relating to the global BGP router.
    pub(crate) state: Option<GlobalState>,
    // original -> bgp-mp:route-selection-options
    // Parameters relating to options for route selection.
    #[serde(rename = "route-selection-options")]
    pub(crate) route_selection_options: Option<RouteSelectionOptions>,
    // original -> bgp:default-route-distance
    // Administrative distance (or preference) assigned to
    // routes received from different sources
    // (external, internal, and local).
    #[serde(rename = "default-route-distance")]
    pub(crate) default_route_distance: Option<DefaultRouteDistance>,
    // original -> bgp:confederation
    // Parameters indicating whether the local system acts as part
    // of a BGP confederation.
    pub(crate) confederation: Option<Confederation>,
    // original -> bgp-mp:use-multiple-paths
    // Parameters related to the use of multiple paths for the
    // same NLRI.
    #[serde(rename = "use-multiple-paths")]
    pub(crate) use_multiple_paths: Option<UseMultiplePaths>,
    // original -> bgp:graceful-restart
    // Parameters relating the graceful restart mechanism for BGP.
    #[serde(rename = "graceful-restart")]
    pub(crate) graceful_restart: Option<GracefulRestart>,
    // original -> bgp:afi-safis
    // Address family specific configuration.
    #[serde(rename = "afi-safis")]
    pub(crate) afi_safis: Option<Vec<AfiSafi>>,
    // original -> rpol:apply-policy
    // Anchor point for routing policies in the model.
    // Import and export policies are with respect to the local
    // routing table, i.e., export (send) and import (receive),
    // depending on the context.
    #[serde(rename = "apply-policy")]
    pub(crate) apply_policy: Option<ApplyPolicy>,
}
// struct for container bgp:bgp.
// Top-level configuration and state for the BGP router.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Bgp {
    // original -> bgp:global
    // Global configuration for the BGP router.
    pub(crate) global: Option<Global>,
    // original -> bgp:neighbors
    // Configuration for BGP neighbors.
    pub(crate) neighbors: Option<Vec<Neighbor>>,
    // original -> bgp:peer-groups
    // Configuration for BGP peer-groups.
    #[serde(rename = "peer-groups")]
    pub(crate) peer_groups: Option<Vec<PeerGroup>>,
    // original -> gobgp:rpki-servers
    #[serde(rename = "rpki-servers")]
    pub(crate) rpki_servers: Option<Vec<RpkiServer>>,
    // original -> gobgp:bmp-servers
    #[serde(rename = "bmp-servers")]
    pub(crate) bmp_servers: Option<Vec<BmpServer>>,
    // original -> gobgp:vrfs
    pub(crate) vrfs: Option<Vec<Vrf>>,
    // original -> gobgp:mrt-dump
    #[serde(rename = "mrt-dump")]
    pub(crate) mrt_dump: Option<Vec<Mrt>>,
    // original -> gobgp:zebra
    pub(crate) zebra: Option<Zebra>,
    // original -> gobgp:collector
    pub(crate) collector: Option<Collector>,
    // original -> gobgp:dynamic-neighbors
    #[serde(rename = "dynamic-neighbors")]
    pub(crate) dynamic_neighbors: Option<Vec<DynamicNeighbor>>,
}
// struct for container gobgp:set-large-community-method.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct SetLargeCommunityMethod {
    // original -> gobgp:communities
    #[serde(rename = "communities-list")]
    pub(crate) communities_list: Option<Vec<String>>,
}
// struct for container gobgp:set-large-community.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct SetLargeCommunity {
    // original -> gobgp:set-large-community-method
    #[serde(rename = "set-large-community-method")]
    pub(crate) set_large_community_method: Option<SetLargeCommunityMethod>,
    // original -> gobgp:options
    pub(crate) options: Option<BgpSetCommunityOptionType>,
}
// struct for container bgp-pol:set-ext-community-method.
// Option to set communities using an inline list or
// reference to an existing defined set.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct SetExtCommunityMethod {
    // original -> bgp-pol:communities
    // original type is list of union
    // Set the community values for the update inline with
    // a list.
    #[serde(rename = "communities-list")]
    pub(crate) communities_list: Option<Vec<String>>,
    // original -> bgp-pol:ext-community-set-ref
    // References a defined extended community set by
    // name.
    #[serde(rename = "ext-community-set-ref")]
    pub(crate) ext_community_set_ref: Option<String>,
}
// struct for container bgp-pol:set-ext-community.
// Action to set the extended community attributes of the
// route, along with options to modify how the community is
// modified.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct SetExtCommunity {
    // original -> bgp-pol:set-ext-community-method
    // Option to set communities using an inline list or
    // reference to an existing defined set.
    #[serde(rename = "set-ext-community-method")]
    pub(crate) set_ext_community_method: Option<SetExtCommunityMethod>,
    // original -> bgp-pol:options
    // bgp-pol:options's original type is bgp-set-community-option-type.
    // options for modifying the extended community
    // attribute with the specified values. These options
    // apply to both methods of setting the community
    // attribute.
    pub(crate) options: Option<String>,
}
// struct for container bgp-pol:set-community-method.
// Option to set communities using an inline list or
// reference to an existing defined set.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct SetCommunityMethod {
    // original -> bgp-pol:communities
    // original type is list of union
    // Set the community values for the update inline with
    // a list.
    #[serde(rename = "communities-list")]
    pub(crate) communities_list: Option<Vec<String>>,
    // original -> bgp-pol:community-set-ref
    // References a defined community set by name.
    #[serde(rename = "community-set-ref")]
    pub(crate) community_set_ref: Option<String>,
}
// struct for container bgp-pol:set-community.
// action to set the community attributes of the route, along
// with options to modify how the community is modified.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct SetCommunity {
    // original -> bgp-pol:set-community-method
    // Option to set communities using an inline list or
    // reference to an existing defined set.
    #[serde(rename = "set-community-method")]
    pub(crate) set_community_method: Option<SetCommunityMethod>,
    // original -> bgp-pol:options
    // bgp-pol:options's original type is bgp-set-community-option-type.
    // Options for modifying the community attribute with
    // the specified values.  These options apply to both
    // methods of setting the community attribute.
    pub(crate) options: Option<String>,
}
// struct for container bgp-pol:set-as-path-prepend.
// action to prepend local AS number to the AS-path a
// specified number of times.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct SetAsPathPrepend {
    // original -> bgp-pol:repeat-n
    // number of times to prepend the local AS
    // number.
    #[serde(rename = "repeat-n")]
    pub(crate) repeat_n: Option<u8>,
    // original -> gobgp:as
    // gobgp:as's original type is union.
    // autonomous system number or 'last-as' which means
    // the leftmost as number in the AS-path to be prepended.
    pub(crate) r#as: Option<String>,
}
// struct for container bgp-pol:bgp-actions.
// Definitions for policy action statements that
// change BGP-specific attributes of the route.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct BgpActions {
    // original -> bgp-pol:set-as-path-prepend
    // action to prepend local AS number to the AS-path a
    // specified number of times.
    #[serde(rename = "set-as-path-prepend")]
    pub(crate) set_as_path_prepend: Option<SetAsPathPrepend>,
    // original -> bgp-pol:set-community
    // action to set the community attributes of the route, along
    // with options to modify how the community is modified.
    #[serde(rename = "set-community")]
    pub(crate) set_community: Option<SetCommunity>,
    // original -> bgp-pol:set-ext-community
    // Action to set the extended community attributes of the
    // route, along with options to modify how the community is
    // modified.
    #[serde(rename = "set-ext-community")]
    pub(crate) set_ext_community: Option<SetExtCommunity>,
    // original -> bgp-pol:set-route-origin
    // set the origin attribute to the specified
    // value.
    #[serde(rename = "set-route-origin")]
    pub(crate) set_route_origin: Option<BgpOriginAttrType>,
    // original -> bgp-pol:set-local-pref
    // set the local pref attribute on the route
    // update.
    #[serde(rename = "set-local-pref")]
    pub(crate) set_local_pref: Option<u32>,
    // original -> bgp-pol:set-next-hop
    // set the next-hop attribute in the route update.
    #[serde(rename = "set-next-hop")]
    pub(crate) set_next_hop: Option<BgpNextHopType>,
    // original -> bgp-pol:set-med
    // set the med metric attribute in the route
    // update.
    #[serde(rename = "set-med")]
    pub(crate) set_med: Option<BgpSetMedType>,
    // original -> gobgp:set-large-community
    #[serde(rename = "set-large-community")]
    pub(crate) set_large_community: Option<SetLargeCommunity>,
}
// struct for container rpol:igp-actions.
// Actions to set IGP route attributes; these actions
// apply to multiple IGPs.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct IgpActions {
    // original -> rpol:set-tag
    // Set the tag value for OSPF or IS-IS routes.
    #[serde(rename = "set-tag")]
    pub(crate) set_tag: Option<TagType>,
}
// struct for container rpol:actions.
// Action statements for this policy
// statement.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Actions {
    // original -> rpol:route-disposition
    // Select the final disposition for the route, either
    // accept or reject.
    #[serde(rename = "route-disposition")]
    pub(crate) route_disposition: Option<RouteDisposition>,
    // original -> rpol:igp-actions
    // Actions to set IGP route attributes; these actions
    // apply to multiple IGPs.
    #[serde(rename = "igp-actions")]
    pub(crate) igp_actions: Option<IgpActions>,
    // original -> bgp-pol:bgp-actions
    // Definitions for policy action statements that
    // change BGP-specific attributes of the route.
    #[serde(rename = "bgp-actions")]
    pub(crate) bgp_actions: Option<BgpActions>,
}
// struct for container gobgp:match-large-community-set.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MatchLargeCommunitySet {
    // original -> gobgp:large-community-set
    #[serde(rename = "large-community-set")]
    pub(crate) large_community_set: Option<String>,
    // original -> rpol:match-set-options
    // Optional parameter that governs the behaviour of the
    // match operation.
    #[serde(rename = "match-set-options")]
    pub(crate) match_set_options: Option<MatchSetOptionsType>,
}
// struct for container bgp-pol:as-path-length.
// Value and comparison operations for conditions based on the
// length of the AS path in the route update.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AsPathLength {
    // original -> ptypes:operator
    // type of comparison to be performed.
    pub(crate) operator: Option<AttributeComparison>,
    // original -> ptypes:value
    // value to compare with the community count.
    pub(crate) value: Option<u32>,
}
// struct for container bgp-pol:community-count.
// Value and comparison operations for conditions based on the
// number of communities in the route update.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct CommunityCount {
    // original -> ptypes:operator
    // type of comparison to be performed.
    pub(crate) operator: Option<AttributeComparison>,
    // original -> ptypes:value
    // value to compare with the community count.
    pub(crate) value: Option<u32>,
}
// struct for container bgp-pol:match-as-path-set.
// Match a referenced as-path set according to the logic
// defined in the match-set-options leaf.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MatchAsPathSet {
    // original -> bgp-pol:as-path-set
    // References a defined AS path set.
    #[serde(rename = "as-path-set")]
    pub(crate) as_path_set: Option<String>,
    // original -> rpol:match-set-options
    // Optional parameter that governs the behaviour of the
    // match operation.
    #[serde(rename = "match-set-options")]
    pub(crate) match_set_options: Option<MatchSetOptionsType>,
}
// struct for container bgp-pol:match-ext-community-set.
// Match a referenced extended community-set according to the
// logic defined in the match-set-options leaf.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MatchExtCommunitySet {
    // original -> bgp-pol:ext-community-set
    // References a defined extended community set.
    #[serde(rename = "ext-community-set")]
    pub(crate) ext_community_set: Option<String>,
    // original -> rpol:match-set-options
    // Optional parameter that governs the behaviour of the
    // match operation.
    #[serde(rename = "match-set-options")]
    pub(crate) match_set_options: Option<MatchSetOptionsType>,
}
// struct for container bgp-pol:match-community-set.
// Match a referenced community-set according to the logic
// defined in the match-set-options leaf.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MatchCommunitySet {
    // original -> bgp-pol:community-set
    // References a defined community set.
    #[serde(rename = "community-set")]
    pub(crate) community_set: Option<String>,
    // original -> rpol:match-set-options
    // Optional parameter that governs the behaviour of the
    // match operation.
    #[serde(rename = "match-set-options")]
    pub(crate) match_set_options: Option<MatchSetOptionsType>,
}
// struct for container bgp-pol:bgp-conditions.
// Policy conditions for matching
// BGP-specific defined sets or comparing BGP-specific
// attributes.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct BgpConditions {
    // original -> bgp-pol:match-community-set
    // Match a referenced community-set according to the logic
    // defined in the match-set-options leaf.
    #[serde(rename = "match-community-set")]
    pub(crate) match_community_set: Option<MatchCommunitySet>,
    // original -> bgp-pol:match-ext-community-set
    // Match a referenced extended community-set according to the
    // logic defined in the match-set-options leaf.
    #[serde(rename = "match-ext-community-set")]
    pub(crate) match_ext_community_set: Option<MatchExtCommunitySet>,
    // original -> bgp-pol:match-as-path-set
    // Match a referenced as-path set according to the logic
    // defined in the match-set-options leaf.
    #[serde(rename = "match-as-path-set")]
    pub(crate) match_as_path_set: Option<MatchAsPathSet>,
    // original -> bgp-pol:med-eq
    // Condition to check if the received MED value is equal to
    // the specified value.
    #[serde(rename = "med-eq")]
    pub(crate) med_eq: Option<u32>,
    // original -> bgp-pol:origin-eq
    // Condition to check if the route origin is equal to the
    // specified value.
    #[serde(rename = "origin-eq")]
    pub(crate) origin_eq: Option<BgpOriginAttrType>,
    // original -> bgp-pol:next-hop-in
    // original type is list of inet:ip-address
    // List of next hop addresses to check for in the route
    // update.
    #[serde(rename = "next-hop-in-list")]
    pub(crate) next_hop_in_list: Option<Vec<String>>,
    // original -> bgp-pol:afi-safi-in
    // List of address families which the NLRI may be
    // within.
    #[serde(rename = "afi-safi-in-list")]
    pub(crate) afi_safi_in_list: Option<Vec<AfiSafiType>>,
    // original -> bgp-pol:local-pref-eq
    // Condition to check if the local pref attribute is equal to
    // the specified value.
    #[serde(rename = "local-pref-eq")]
    pub(crate) local_pref_eq: Option<u32>,
    // original -> bgp-pol:community-count
    // Value and comparison operations for conditions based on the
    // number of communities in the route update.
    #[serde(rename = "community-count")]
    pub(crate) community_count: Option<CommunityCount>,
    // original -> bgp-pol:as-path-length
    // Value and comparison operations for conditions based on the
    // length of the AS path in the route update.
    #[serde(rename = "as-path-length")]
    pub(crate) as_path_length: Option<AsPathLength>,
    // original -> bgp-pol:route-type
    // Condition to check the route type in the route update.
    #[serde(rename = "route-type")]
    pub(crate) route_type: Option<RouteType>,
    // original -> gobgp:rpki-validation-result
    // specify the validation result of RPKI based on ROA as conditions.
    #[serde(rename = "rpki-validation-result")]
    pub(crate) rpki_validation_result: Option<RpkiValidationResultType>,
    // original -> gobgp:match-large-community-set
    #[serde(rename = "match-large-community-set")]
    pub(crate) match_large_community_set: Option<MatchLargeCommunitySet>,
}
// struct for container rpol:igp-conditions.
// Policy conditions for IGP attributes.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct IgpConditions {}
// struct for container rpol:match-tag-set.
// Match a referenced tag set according to the logic defined
// in the match-options-set leaf.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MatchTagSet {
    // original -> rpol:tag-set
    // References a defined tag set.
    #[serde(rename = "tag-set")]
    pub(crate) tag_set: Option<String>,
    // original -> rpol:match-set-options
    // Optional parameter that governs the behaviour of the
    // match operation.  This leaf only supports matching on ANY
    // member of the set or inverting the match.  Matching on ALL is
    // not supported).
    #[serde(rename = "match-set-options")]
    pub(crate) match_set_options: Option<MatchSetOptionsRestrictedType>,
}
// struct for container rpol:match-neighbor-set.
// Match a referenced neighbor set according to the logic
// defined in the match-set-options-leaf.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MatchNeighborSet {
    // original -> rpol:neighbor-set
    // References a defined neighbor set.
    #[serde(rename = "neighbor-set")]
    pub(crate) neighbor_set: Option<String>,
    // original -> rpol:match-set-options
    // Optional parameter that governs the behaviour of the
    // match operation.  This leaf only supports matching on ANY
    // member of the set or inverting the match.  Matching on ALL is
    // not supported).
    #[serde(rename = "match-set-options")]
    pub(crate) match_set_options: Option<MatchSetOptionsRestrictedType>,
}
// struct for container rpol:match-prefix-set.
// Match a referenced prefix-set according to the logic
// defined in the match-set-options leaf.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct MatchPrefixSet {
    // original -> rpol:prefix-set
    // References a defined prefix set.
    #[serde(rename = "prefix-set")]
    pub(crate) prefix_set: Option<String>,
    // original -> rpol:match-set-options
    // Optional parameter that governs the behaviour of the
    // match operation.  This leaf only supports matching on ANY
    // member of the set or inverting the match.  Matching on ALL is
    // not supported).
    #[serde(rename = "match-set-options")]
    pub(crate) match_set_options: Option<MatchSetOptionsRestrictedType>,
}
// struct for container rpol:conditions.
// Condition statements for this
// policy statement.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Conditions {
    // original -> rpol:call-policy
    // Applies the statements from the specified policy
    // definition and then returns control the current
    // policy statement. Note that the called policy may
    // itself call other policies (subject to
    // implementation limitations). This is intended to
    // provide a policy 'subroutine' capability.  The
    // called policy should contain an explicit or a
    // default route disposition that returns an
    // effective true (accept-route) or false
    // (reject-route), otherwise the behavior may be
    // ambiguous and implementation dependent.
    #[serde(rename = "call-policy")]
    pub(crate) call_policy: Option<String>,
    // original -> rpol:match-prefix-set
    // Match a referenced prefix-set according to the logic
    // defined in the match-set-options leaf.
    #[serde(rename = "match-prefix-set")]
    pub(crate) match_prefix_set: Option<MatchPrefixSet>,
    // original -> rpol:match-neighbor-set
    // Match a referenced neighbor set according to the logic
    // defined in the match-set-options-leaf.
    #[serde(rename = "match-neighbor-set")]
    pub(crate) match_neighbor_set: Option<MatchNeighborSet>,
    // original -> rpol:match-tag-set
    // Match a referenced tag set according to the logic defined
    // in the match-options-set leaf.
    #[serde(rename = "match-tag-set")]
    pub(crate) match_tag_set: Option<MatchTagSet>,
    // original -> rpol:install-protocol-eq
    // Condition to check the protocol / method used to install
    // which installed the route into the local routing table.
    #[serde(rename = "install-protocol-eq")]
    pub(crate) install_protocol_eq: Option<InstallProtocolType>,
    // original -> rpol:igp-conditions
    // Policy conditions for IGP attributes.
    #[serde(rename = "igp-conditions")]
    pub(crate) igp_conditions: Option<IgpConditions>,
    // original -> bgp-pol:bgp-conditions
    // Policy conditions for matching
    // BGP-specific defined sets or comparing BGP-specific
    // attributes.
    #[serde(rename = "bgp-conditions")]
    pub(crate) bgp_conditions: Option<BgpConditions>,
}
// struct for container rpol:statement.
// Policy statements group conditions and actions
// within a policy definition.  They are evaluated in
// the order specified (see the description of policy
// evaluation at the top of this module.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Statement {
    // original -> rpol:name
    // name of the policy statement.
    pub(crate) name: Option<String>,
    // original -> rpol:conditions
    // Condition statements for this
    // policy statement.
    pub(crate) conditions: Option<Conditions>,
    // original -> rpol:actions
    // Action statements for this policy
    // statement.
    pub(crate) actions: Option<Actions>,
}
// struct for container rpol:policy-definition.
// List of top-level policy definitions, keyed by unique
// name.  These policy definitions are expected to be
// referenced (by name) in policy chains specified in import
// or export configuration statements.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct PolicyDefinition {
    // original -> rpol:name
    // Name of the top-level policy definition -- this name
    //  is used in references to the current policy.
    pub(crate) name: Option<String>,
    // original -> rpol:statements
    // Enclosing container for policy statements.
    pub(crate) statements: Option<Vec<Statement>>,
}
// struct for container gobgp:large-community-set.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct LargeCommunitySet {
    // original -> gobgp:large-community-set-name
    #[serde(rename = "large-community-set-name")]
    pub(crate) large_community_set_name: Option<String>,
    // original -> gobgp:large-community
    // extended community set member.
    #[serde(rename = "large-community-list")]
    pub(crate) large_community_list: Option<Vec<String>>,
}
// struct for container bgp-pol:as-path-set.
// Definitions for AS path sets.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct AsPathSet {
    // original -> bgp-pol:as-path-set-name
    // name of the AS path set -- this is used to reference
    // the set in match conditions.
    #[serde(rename = "as-path-set-name")]
    pub(crate) as_path_set_name: Option<String>,
    // original -> gobgp:as-path
    // AS path expression.
    #[serde(rename = "as-path-list")]
    pub(crate) as_path_list: Option<Vec<String>>,
}
// struct for container bgp-pol:ext-community-set.
// Definitions for extended community sets.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct ExtCommunitySet {
    // original -> bgp-pol:ext-community-set-name
    // name / label of the extended community set -- this is
    // used to reference the set in match conditions.
    #[serde(rename = "ext-community-set-name")]
    pub(crate) ext_community_set_name: Option<String>,
    // original -> gobgp:ext-community
    // extended community set member.
    #[serde(rename = "ext-community-list")]
    pub(crate) ext_community_list: Option<Vec<String>>,
}
// struct for container bgp-pol:community-set.
// Definitions for community sets.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct CommunitySet {
    // original -> bgp-pol:community-set-name
    // name / label of the community set -- this is used to
    // reference the set in match conditions.
    #[serde(rename = "community-set-name")]
    pub(crate) community_set_name: Option<String>,
    // original -> gobgp:community
    // community set member.
    #[serde(rename = "community-list")]
    pub(crate) community_list: Option<Vec<String>>,
}
// struct for container bgp-pol:bgp-defined-sets.
// BGP-related set definitions for policy match conditions.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct BgpDefinedSets {
    // original -> bgp-pol:community-sets
    // Enclosing container for community sets.
    #[serde(rename = "community-sets")]
    pub(crate) community_sets: Option<Vec<CommunitySet>>,
    // original -> bgp-pol:ext-community-sets
    // Enclosing container for extended community sets.
    #[serde(rename = "ext-community-sets")]
    pub(crate) ext_community_sets: Option<Vec<ExtCommunitySet>>,
    // original -> bgp-pol:as-path-sets
    // Enclosing container for AS path sets.
    #[serde(rename = "as-path-sets")]
    pub(crate) as_path_sets: Option<Vec<AsPathSet>>,
    // original -> gobgp:large-community-sets
    #[serde(rename = "large-community-sets")]
    pub(crate) large_community_sets: Option<Vec<LargeCommunitySet>>,
}
// struct for container rpol:tag.
// list of tags that are part of the tag set.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Tag {
    // original -> rpol:value
    // Value of the tag set member.
    pub(crate) value: Option<TagType>,
}
// struct for container rpol:tag-set.
// Definitions for tag sets.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct TagSet {
    // original -> rpol:tag-set-name
    // name / label of the tag set -- this is used to reference
    // the set in match conditions.
    #[serde(rename = "tag-set-name")]
    pub(crate) tag_set_name: Option<String>,
    // original -> rpol:tag
    // list of tags that are part of the tag set.
    #[serde(rename = "tag-list")]
    pub(crate) tag_list: Option<Vec<Tag>>,
}
// struct for container rpol:neighbor-set.
// Definitions for neighbor sets.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct NeighborSet {
    // original -> rpol:neighbor-set-name
    // name / label of the neighbor set -- this is used to
    // reference the set in match conditions.
    #[serde(rename = "neighbor-set-name")]
    pub(crate) neighbor_set_name: Option<String>,
    // original -> gobgp:neighbor-info
    // original type is list of inet:ip-address
    // neighbor ip address or prefix.
    #[serde(rename = "neighbor-info-list")]
    pub(crate) neighbor_info_list: Option<Vec<String>>,
}
// struct for container rpol:prefix.
// List of prefix expressions that are part of the set.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct Prefix {
    // original -> rpol:ip-prefix
    // rpol:ip-prefix's original type is inet:ip-prefix.
    // The prefix member in CIDR notation -- while the
    // prefix may be either IPv4 or IPv6, most
    // implementations require all members of the prefix set
    // to be the same address family.  Mixing address types in
    // the same prefix set is likely to cause an error.
    #[serde(rename = "ip-prefix")]
    pub(crate) ip_prefix: Option<String>,
    // original -> rpol:masklength-range
    // Defines a range for the masklength, or 'exact' if
    // the prefix has an exact length.
    //
    // Example: 10.3.192.0/21 through 10.3.192.0/24 would be
    // expressed as prefix: 10.3.192.0/21,
    // masklength-range: 21..24.
    //
    // Example: 10.3.192.0/21 would be expressed as
    // prefix: 10.3.192.0/21,
    // masklength-range: exact.
    #[serde(rename = "masklength-range")]
    pub(crate) masklength_range: Option<String>,
}
// struct for container rpol:prefix-set.
// List of the defined prefix sets.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct PrefixSet {
    // original -> rpol:prefix-set-name
    // name / label of the prefix set -- this is used to
    // reference the set in match conditions.
    #[serde(rename = "prefix-set-name")]
    pub(crate) prefix_set_name: Option<String>,
    // original -> rpol:prefix
    // List of prefix expressions that are part of the set.
    #[serde(rename = "prefix-list")]
    pub(crate) prefix_list: Option<Vec<Prefix>>,
}
// struct for container rpol:defined-sets.
// Predefined sets of attributes used in policy match
// statements.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct DefinedSets {
    // original -> rpol:prefix-sets
    // Enclosing container for defined prefix sets for matching.
    #[serde(rename = "prefix-sets")]
    pub(crate) prefix_sets: Option<Vec<PrefixSet>>,
    // original -> rpol:neighbor-sets
    // Enclosing container for defined neighbor sets for matching.
    #[serde(rename = "neighbor-sets")]
    pub(crate) neighbor_sets: Option<Vec<NeighborSet>>,
    // original -> rpol:tag-sets
    // Enclosing container for defined tag sets for matching.
    #[serde(rename = "tag-sets")]
    pub(crate) tag_sets: Option<Vec<TagSet>>,
    // original -> bgp-pol:bgp-defined-sets
    // BGP-related set definitions for policy match conditions.
    #[serde(rename = "bgp-defined-sets")]
    pub(crate) bgp_defined_sets: Option<BgpDefinedSets>,
}
// struct for container rpol:routing-policy.
// top-level container for all routing policy configuration.
#[derive(Deserialize, Debug, Default)]
#[serde(deny_unknown_fields)]
pub(crate) struct RoutingPolicy {
    // original -> rpol:defined-sets
    // Predefined sets of attributes used in policy match
    // statements.
    #[serde(rename = "defined-sets")]
    pub(crate) defined_sets: Option<DefinedSets>,
    // original -> rpol:policy-definitions
    // Enclosing container for the list of top-level policy
    // definitions.
    #[serde(rename = "policy-definitions")]
    pub(crate) policy_definitions: Option<Vec<PolicyDefinition>>,
}
